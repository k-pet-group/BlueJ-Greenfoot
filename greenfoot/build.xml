<project name="greenfoot" default="dist" basedir=".">
    <description>
        greenfoot build file
    </description>

    <!-- ********************************************** -->
    <!-- it should not be necessary to edit any properties to build -->

    <dirname property="greenfoot_home" file="${ant.file}"/>
    <property name="bluej_home" location="${greenfoot_home}/../bluej"/>
    <!-- user specific properties that are edited to match local build environment-->
    <property file="build.properties"/>

    <!-- get java version to build with from the build.properties file used for BlueJ -->
    <property file="${bluej_home}/build.properties"/>

    <property name="threadchecker.build" value="${bluej_home}/threadchecker/classes"/>
    <property name="threadchecker.pluginbuild" value="${bluej_home}/threadchecker/pluginclasses"/>

    <!-- Greenfoot Version Number -->
    <property name="greenfoot.version.major" value="3"/>
    <property name="greenfoot.version.minor" value="7"/>
    <property name="greenfoot.version.micro" value="1"/>
    <property name="greenfoot.version.suffix" value="" />
    
    <!-- Greenfoot version to API mapping:        -->
    <!--    Greenfoot 2.3.0 = API version 2.5.0   -->
    <!--    Greenfoot 2.4.0 = API version 2.6.0   -->
    <!--    Greenfoot 2.4.1 = API version 2.7.0   -->

    <!-- Change when API has changed in a way that is likely to break some scenarios. 
    A warning will be shown to the user - update the greenfoot-labels file to
    specify the breaking changes introduced in this version. -->
    <!-- YOU MUST UPDATE THE GREENFOOT LABELS if you change this -->
    <property name="greenfoot.apiversion.breaking" value="3"/>
    
    <!-- Change when API has changed in a way that is visible to the user, but is very 
    unlikely to break scenarios (documentation changes, addition of method).
    Changing this number will stripe the user's classes and require a recompile.
    Do not change this number if the changes cannot break older scenarios. -->
    <!-- YOU SHOULD UPDATE THE GREENFOOT LABELS if you change this -->
    <property name="greenfoot.apiversion.nonbreaking" value="0"/>
    
    <!-- Change when API has only changed internally and not in any way visible to the user. 
    It should not be possible for this change to break existing scenarios. 
    Changing this number will NOT stripe the user's classes nor require a recompile. -->
    <property name="greenfoot.apiversion.internal" value="0"/>
        
    <property name="greenfoot.apiversion" value="${greenfoot.apiversion.breaking}.${greenfoot.apiversion.nonbreaking}.${greenfoot.apiversion.internal}"/>

    <property name="greenfoot.apiversion.public" value="${greenfoot.apiversion.breaking}.${greenfoot.apiversion.nonbreaking}"/>

    <property name="greenfoot.version" value="${greenfoot.version.major}.${greenfoot.version.minor}.${greenfoot.version.micro}${greenfoot.version.suffix}"/>
    <property name="greenfoot.version.nodots" value="${greenfoot.version.major}${greenfoot.version.minor}${greenfoot.version.micro}${greenfoot.version.suffix}"/>
    <property name="greenfoot.version.commas" value="${greenfoot.version.major},${greenfoot.version.minor},${greenfoot.version.micro}"/>
    <property name="greenfoot.version.nosuffix" value="${greenfoot.version.major}.${greenfoot.version.minor}.${greenfoot.version.micro}"/>

    <!-- Suffix added after version number in output files -->
    <property name="greenfoot.rcsuffix" value="-rc2"/>

    <!-- Location of the bluej lib dir -->
    <property name="bluej.lib.greenfoot"  location="${bluej_home}/lib/greenfoot"/>
    
    <!-- Name and location of the jlayer jar -->  
    <property name="jlayer.jar.name" value="jl1.0.1.jar"/>  
    <property name="jlayer.jar.path" value="${bluej_home}/lib/${jlayer.jar.name}"/>

    <path id="javafx.class.path">
        <pathelement location="${openjfx_path}/lib/javafx.base.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.controls.jar"/>
        <!-- Needed because of NSMenuFX -->
        <pathelement location="${openjfx_path}/lib/javafx.fxml.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.graphics.jar"/>
        <!-- Needed for sound support, which is BlueJ because of Stride support for sound preview -->
        <pathelement location="${openjfx_path}/lib/javafx.media.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.properties.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.swing.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.web.jar"/>
    </path>
        
    <!-- The classpath to the bluej classes-->
    <path id="bluej.class.path">
        <pathelement location="${bluej_home}/classes"/>
        <pathelement location="${bluej_home}/boot/classes"/>
        <pathelement location="${bluej_home}/lib/antlr.jar"/>
        <fileset dir="${bluej_home}/lib/" includes="junit-*.jar"/>
        <pathelement location="${bluej_home}/lib/hamcrest-core-1.3.jar"/>
        <pathelement location="${bluej_home}/lib/AppleJavaExtensions.jar"/>
        <pathelement location="${bluej_home}/lib/commons-logging-api-1.1.2.jar"/>
        <pathelement location="${bluej_home}/lib/httpclient-4.1.1.jar"/>
        <pathelement location="${bluej_home}/lib/httpcore-4.1.jar"/>
        <pathelement location="${bluej_home}/lib/httpmime-4.1.1.jar"/>
        <pathelement location="${jlayer.jar.path}"/>
        <pathelement location="${bluej_home}/lib/opencsv-2.3.jar"/>
        <pathelement location="${bluej_home}/lib/xom-1.3.7.jar"/>
        <pathelement location="${bluej_home}/lib/diffutils-1.2.1.jar"/>
    </path>
    <!-- The sourcepath to the bluej classes-->
    <path id="bluej.src.path">
        <pathelement location="${bluej_home}/src"/>
        <pathelement location="${bluej_home}/boot/src"/>
    </path>
    <!-- Location of the files packed by BlueJ dist target -->
    <property name="bluej.installer.jar"  location="${bluej_home}/package/Greenfoot-generic.jar"/>
    <property name="bluej.dist.jar"  location="${bluej_home}/package/greenfoot-dist.jar"/>
    <property name="greenfoot.dist.mac"  location="${bluej_home}/package/Greenfoot-mac.zip"/>
    <property name="bluej.msi" location="${bluej_home}/package/winsetup/greenfoot-${greenfoot.version}-bundled.msi"/>
    <property name="bluej.standalone" location="${bluej_home}/package/winsetup/greenfoot-standalone-${greenfoot.version}.zip"/>

    <!-- Location of the zip with the sources for greenfoot -->
    <property name="greenfoot.source.zip" location="package/Greenfoot-source-${greenfoot.version.nodots}${greenfoot.rcsuffix}.zip"/>
    
    <!-- Location of the source files for greenfoot -->
    <property name="src" location="src"/>

    <!-- Location of the build dir for standalone greenfoot -->
    <property name="standalone.build" location="${bluej.lib.greenfoot}/standalone"/>

    <!-- Location of the test source files for greenfoot -->
    <property name="test.src" location="test/src"/>
    <property name="test.report" value="test"/>
    <!-- Location of the image files for greenfoot -->
    <property name="images" location="images"/>

    <!-- Location where javadoc for the API classes will be stored. -->
    <property name="apidoc" location="doc/API"/>
    <!-- Location of the build-dir where the class files will be stored -->
    <property name="build" location="classes"/>
    <!-- Location of the packed files for distribution -->
    <property name="package" location="package"/>

    <!-- Source files that make up the Greenfoot API -->
    <fileset id="api-source.files" dir="${src}" defaultexcludes="yes">
        <include name="greenfoot/Actor.java" />
        <include name="greenfoot/World.java" />
        <include name="greenfoot/GreenfootImage.java" />
        <include name="greenfoot/GreenfootSound.java" />
        <include name="greenfoot/Greenfoot.java" />
        <include name="greenfoot/MouseInfo.java" />
        <include name="greenfoot/UserInfo.java" />
        <include name="greenfoot/Color.java" />
        <include name="greenfoot/Font.java" />
    </fileset>

    <!-- scenarios to be included in standard distribution -->
    <patternset id="distribution.scenarios">
        <exclude name="scenarios/**/**/*.pkh" />
        <exclude name="scenarios/**/**/.#*" />
        <exclude name="scenarios/**/**/.cvsignore" />
        <exclude name="scenarios/**/**/doc/" />
        <exclude name="scenarios/**/**/__*" />
        <include name="scenarios/java/lunarlander/" />
        <include name="scenarios/java/ants/" />
        <include name="scenarios/java/LTA/" />
        <include name="scenarios/stride/trick-the-turtle/" />
        <include name="scenarios/stride/pengu/" />
    </patternset>

    <!-- The classpath to the greenfoot classes (once they are built) -->
    <path id="greenfoot.class.path">
        <pathelement location="${build}"/>
        <pathelement location="${threadchecker.build}"/>
    </path>
    
    <!-- License files that will be included in the distribution -->
    <fileset id="greenfoot.license.files" dir="doc/">
        <include name="GREENFOOT_LICENSES.txt" />
        <include name="LICENSE.txt" />
        <include name="THIRDPARTYLICENSE.txt" />
    </fileset>

    <!-- If you change the first or last lines of this license you might want
    to update the 'add-license-to-sources' target as well -->    
    <property name="license" value="/*${line.separator}
This file is part of the Greenfoot program. ${line.separator}
Copyright (C) 2005-2018  Poul Henriksen and Michael Kolling ${line.separator}
${line.separator}
This program is free software; you can redistribute it and/or ${line.separator}
modify it under the terms of the GNU General Public License ${line.separator}
as published by the Free Software Foundation; either version 2 ${line.separator}
of the License, or (at your option) any later version. ${line.separator}
${line.separator}
This program is distributed in the hope that it will be useful, ${line.separator}
but WITHOUT ANY WARRANTY; without even the implied warranty of ${line.separator}
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ${line.separator}
GNU General Public License for more details. ${line.separator}
${line.separator}
You should have received a copy of the GNU General Public License ${line.separator}
along with this program; if not, write to the Free Software ${line.separator}
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA. ${line.separator}
${line.separator}
This file is subject to the Classpath exception as provided in the  ${line.separator}
LICENSE.txt file that accompanied this code.${line.separator}
*/${line.separator}"/>

    <import file="${bluej_home}/shared.xml"/>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <copy  todir="${build}">
            <fileset dir="${images}"/>
            <fileset dir="lib"/>
        </copy>
        <copy todir="${bluej_home}/lib">
            <fileset dir="lib" />
        </copy>
        <mkdir dir="${bluej_home}/doc" />
        <copy todir="${bluej_home}/doc">
            <fileset dir="doc" >
                <include name="APACHE-LICENSE.txt"/>
                <include name="NOTICE.txt"/>
                <include name="API/**"/>
            </fileset>
        </copy>
        <mkdir dir="${package}"/>
    </target>

    <target name="compile" depends="init" description="Compile the source" >
        <!-- Compile the java code from ${src} into ${build} -->
        <compile srcdir="${src}"
                 destdir="${build}">
            <classpath>
                <path refid="javafx.class.path"/>
                <path refid="bluej.class.path"/>
                <pathelement location="${threadchecker.build}"/>
                <pathelement location="${threadchecker.pluginbuild}"/>
            </classpath>
            <compilerarg line="-Xmaxerrs 1000"/>
            <compilerarg value="-Xplugin:threadchecker.TCPlugin"/>
        </compile>
        <copy todir="${build}">
            <fileset dir="${bluej_home}/threadchecker/classes">
                <include name="*.class"/>
            </fileset>
        </copy>
    </target>

    <target name="compile-test" depends="compile" description="Compile the test source" >
        <!-- Compile the java code from ${test.src} into ${build} -->
        <compile srcdir="${test.src}" destdir="${build}">
            <classpath>
                <path refid="javafx.class.path"/>
                <path refid="bluej.class.path"/>
                <pathelement location="${threadchecker.build}"/>
                <pathelement location="${threadchecker.pluginbuild}"/>
            </classpath>
        </compile>
    </target>

    <target name="rebuild-ready" depends="clean,ready-to-run" description="Cleans and then builds everything so it is ready to run.">
        <!-- Useful for running threadchecker -->
    </target>

    <target name="test" depends="compile-test" description="Run tests">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <pathelement location="${build}" />
                <path refid="javafx.class.path"/>
                <path refid="bluej.class.path" />
            </classpath>

            <formatter type="brief" usefile="false" />

            <batchtest fork="yes" skipnontests="true">
                <fileset dir="${test.src}">
                    <include name="**/*.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="compile-scenarios" depends="compile" description="Compile the scenarios">
        <!-- Should first delete all class files in scenario, and the greenfoot dir (depend on clean-scenarios) -->

        <macrodef name="compile-scenario">
            <attribute name="scenario" />
            <sequential>
                <compile srcdir="scenarios/@{scenario}" destdir="scenarios/@{scenario}">
                    <classpath>
                        <path refid="greenfoot.class.path"/>
                        <path refid="javafx.class.path"/>
                        <path refid="bluej.class.path"/>
                    </classpath>
                </compile>
                <replaceregexp byline="true">
                    <regexp pattern="version=.*"/>
                    <substitution expression="version=${greenfoot.apiversion}"/>
                    <fileset dir="scenarios/@{scenario}" includes="project.greenfoot"/>
                </replaceregexp>
            </sequential>
        </macrodef>

        <compile-scenario scenario="java/lunarlander" />
        <compile-scenario scenario="java/ants" />
        <compile-scenario scenario="java/LTA" />
        <compile-scenario scenario="stride/trick-the-turtle" />
        <compile-scenario scenario="stride/pengu" />
    </target>

    <target name="check-bluej-compiled">
        <fail message="bluejcore.jar not found; is BlueJ ready-to-run-greenfoot and is build.properties set correctly? (see build documentation)">
            <condition>
                <not>
                    <available file="${bluej_home}/lib/bluejcore.jar" />
                </not>
            </condition>
        </fail>
    </target>

    <target name="ready-to-run" depends="check-bluej-compiled, update-images, compile, copy-imagelib, copy-common-classes, build-standalone-jar, create-api-doc, copy-apidocs, copy-labels, compile-test" description="Builds everything so it is ready to run" >
        <!-- Put everything in ${build} into the the jar file-->
        <jar jarfile="${bluej_home}/lib/greenfoot.jar" basedir="${build}">
            <manifest>
                <attribute name="Class-Path" value="." />
            </manifest>
        </jar>
    </target>   

    
    <target name="create-api-doc">
        <mkdir dir="${apidoc}"/>
        <javadoc destdir="${apidoc}"
                 executable="${build_java_home}/${java_command_dir_name}/javadoc"
                 Windowtitle="Greenfoot API"
                 Doctitle="Greenfoot API"
                 bottom="&lt;a href=http://www.greenfoot.org/&gt;Greenfoot homepage&lt;/a&gt;"
                 classpathref="greenfoot.class.path"
                 encoding="UTF-8"
        >
            <fileset refid="api-source.files"/>
        </javadoc>

        <!-- Work around this bug https://bugs.openjdk.java.net/browse/JDK-8129828
        where the css file contains a broken link.  (This in turn causes problems
        in JavaFX web view when loading the documentation, even though it shouldn't). -->
        <replaceregexp byline="true">
            <regexp pattern="@import.*dejavu.*"/>
            <substitution expression=""/>
            <fileset dir="${apidoc}" includes="stylesheet.css"/>
        </replaceregexp>

        <mkdir dir="${bluej_home}/lib/english/greenfoot/api"/>
        <copy todir="${bluej_home}/lib/english/greenfoot/api">
            <fileset refid="api-source.files"/>
        </copy>
    </target>

    <target name="copy-scenarios" depends="compile-scenarios"  description="Copies the scenarios to bluej" >
        <copy todir="${bluej_home}/package" preservelastmodified="true">
            <fileset dir=".">
                <patternset refid="distribution.scenarios"/>
            </fileset>
        </copy>
    </target>

    <target name="copy-common-classes" description="Copies the common classes to bluej" >
        <antcall target="copy-common-class">
            <param name="common.class" value="SmoothMover"/>
        </antcall>
        <antcall target="copy-common-class">
            <param name="common.class" value="GifImage"/>
        </antcall>
        <antcall target="copy-common-class">
            <param name="common.class" value="ScoreBoard"/>
        </antcall>
        <antcall target="copy-common-class">
            <param name="common.class" value="SimpleTimer"/>
        </antcall>
        <antcall target="copy-common-class">
            <param name="common.class" value="Counter"/>
        </antcall>
        <antcall target="copy-common-class">
            <param name="common.class" value="Animal"/>
        </antcall>
        <antcall target="copy-common-class">
            <param name="common.class" value="Label"/>
        </antcall>
    </target>

    <target name="copy-common-class">
        <javadoc destdir="common" sourcefiles="common/${common.class}.java"
                         Version="yes" notree="yes" noindex="yes" nohelp="yes" nonavbar="yes"
                         classpath="${build}:common/${common.class}/lib/${common.class}.jar:${threadchecker.build}"
                         encoding="UTF-8"
                         executable="${build_java_home}/${java_command_dir_name}/javadoc"
                         additionalparam="-Xdoclint:none"
        />

        <copy todir="${bluej.lib.greenfoot}" preservelastmodified="true">
            <fileset dir=".">
                <patternset>
                    <include name="common/${common.class}.java" />
                    <include name="common/${common.class}.frame" />
                    <!-- <include name="common/${common.class}.class" /> -->
                    <include name="common/${common.class}.html" />
                    <include name="common/${common.class}.png" />
                    <include name="common/${common.class}.jpg" />
                    <include name="common/${common.class}.jpeg" />
                    <include name="common/${common.class}/lib/**" />
                    <include name="common/inherit.gif" />
                    <include name="common/*.js" />
                    <include name="common/*.css" />
                </patternset>
            </fileset>
        </copy>
    </target>

    <target name="copy-license" description="Copies the license files to BlueJ" >
        <copy todir="${bluej_home}/package/">
            <fileset refid="greenfoot.license.files"/>
        </copy>
    </target>

    <target name="copy-apidocs" description="Copies the API documentation to bluej">
        <copy todir="${bluej_home}/doc">
            <fileset dir="doc">
                <include name="API/**"/>
            </fileset>
        </copy>
    </target>

    <target name="copy-imagelib" description="Copies the images for the image library to bluej">
        <copy todir="${bluej.lib.greenfoot}/imagelib">
            <fileset dir="imagelib"/>
        </copy>
    </target>

    <target name="copy-labels" description="Copies the language labels to bluej">
        <copy todir="${bluej_home}/lib">
            <fileset dir="labels"/>
        </copy>
    </target>

    <target name="update-images" description="Copies the images from the resource directory out into the various places where the images are required.">
        <!-- Jar installer image: greenfoot-splash.png -->
        <copy file="resources/images/greenfoot-splash.png" todir="${bluej_home}/package"/>
        <!-- Greenfoot icon for classes: greenfoot-16.png -->
        <copy file="resources/images/greenfoot-icon-16.png" tofile="imagelib/other/greenfoot.png"/>
        <!-- Greenfoot icon for application on the mac: greenfoot.icns -->
        <copy file="resources/images/greenfoot.icns" todir="${bluej_home}/package/macfiles/Greenfoot.app/Contents/Resources"/>

        <!-- Greenfoot icon for application: greenfoot-16.png -->
        <copy file="resources/images/greenfoot-icon-16.png" tofile="images/greenfoot.png"/>
        <!-- Readme label icon -->
        <copy file="resources/images/readme.png" todir="images"/>
        <!-- Empty image - just to force same layout of compile and readme button -->
        <copy file="resources/images/compile.png" todir="images"/>
        <!-- Image used when dragging object over an area where it can not be dropped  -->
        <copy file="resources/images/noParking.png" todir="images"/>
        <!-- Image selection dialog icon -->
        <copy file="resources/images/openRight.png" todir="images"/>
        <!-- Control panel icons-->
        <copy file="resources/images/run.png" todir="images"/>
        <copy file="resources/images/step.png" todir="images"/>
        <copy file="resources/images/pause.png" todir="images"/>
        <copy file="resources/images/reset.png" todir="images"/>
        <!-- Export icons -->
        <copy file="resources/images/export-app.png" todir="images"/>
        <copy file="resources/images/export-project.png" todir="images"/>
        <copy file="resources/images/export-publish.png" todir="images"/>
        <copy file="resources/images/export-publish-small.png" todir="images"/>
        <copy file="resources/images/export-webpage.png" todir="images"/>
        <!-- Menu button used in image library dialog (gear with drop-arrow) -->
        <copy file="resources/images/menu-button.png" todir="images"/>
        <!-- Execution/activity twirler -->
        <copy file="resources/images/swirl.png" todir="images"/>
        <copy file="resources/images/dropdown.png" todir="images"/>
</target>

    <target name="dist" depends="ready-to-run, clean-scenarios, copy-scenarios, copy-license, zip-source" description="Generate the distribution. Also runs the bluej.dist-greenfoot" >
        <copy file="doc/Greenfoot-README.txt" todir="${bluej_home}/doc"/>
    
        <!-- Run the BlueJ dist-->
        <ant dir="${bluej_home}" target="dist-greenfoot" />

        <move file="${bluej.installer.jar}" tofile="${package}/Greenfoot-generic-${greenfoot.version.nodots}${greenfoot.rcsuffix}.jar"/>
        <move file="${bluej.dist.jar}" tofile="${package}/greenfoot-dist-${greenfoot.version.nodots}${greenfoot.rcsuffix}.jar"/>

        <echo message="The greenfoot dist-jar (used to build windows installer)s is in ${package}/greenfoot-dist-${greenfoot.version.nodots}${greenfoot.rcsuffix}.jar"/>
        <echo message="The greenfoot jar-installer is in ${package}/Greenfoot-generic-${greenfoot.version.nodots}${greenfoot.rcsuffix}.jar"/>
        <echo message="And don't forget to copy this to the gallery: ${package}/Greenfoot-core-${greenfoot.apiversion.public}.jar"/>
    </target>
    <target name="debian-dist" depends="check-fakeroot">
        <ant dir="${bluej_home}/package" antfile="greenfoot-build.xml" target="debian-dist" />
        <move file="${bluej_home}/package/greenfoot-${greenfoot.version}${greenfoot.rcsuffix}.deb" tofile="${package}/Greenfoot-linux-unbundled-${greenfoot.version.nodots}${greenfoot.rcsuffix}.deb" />
    </target>
    <target name="debian-bundled-dist" depends="check-fakeroot">
        <ant dir="${bluej_home}/package" antfile="greenfoot-build.xml" target="debian-bundled-dist" />
        <move file="${bluej_home}/package/greenfoot-bundled-${greenfoot.version}${greenfoot.rcsuffix}.deb" tofile="${package}/Greenfoot-linux-${greenfoot.version.nodots}${greenfoot.rcsuffix}.deb" />
    </target>

    <target name="windows-standalone" depends="update-images, dist">
        <ant dir="${bluej_home}/package" antfile="greenfoot-build.xml" target="windows-standalone" />
        <move file="${bluej.standalone}" tofile="${package}/Greenfoot-windows-${greenfoot.version.nodots}${greenfoot.rcsuffix}.zip"/>
    </target>

    <target name="windows-msi-bundled-dist" depends="update-images, dist">
        <ant dir="${bluej_home}/package" antfile="greenfoot-build.xml" target="windows-msi-bundled-dist" />
        <move file="${bluej.msi}" tofile="${package}/Greenfoot-windows-${greenfoot.version.nodots}${greenfoot.rcsuffix}.msi"/>
    </target>

    <target name="mac-dist" depends="dist">
        <ant dir="${bluej_home}/package" antfile="greenfoot-build.xml" target="mac-dist" />
        <move file="${greenfoot.dist.mac}" tofile="${package}/Greenfoot-mac-${greenfoot.version.nodots}${greenfoot.rcsuffix}.zip"/>
        <echo message="The greenfoot Mac-installer is in ${package}/Greenfoot-mac-${greenfoot.version.nodots}${greenfoot.rcsuffix}.zip"/>
    </target>

    <!-- The simple targets for doing a complete build: -->
    <target name="mac" description="Clean, update version number and build Mac installer" depends="clean,update-version-number,mac-dist"/>
    <target name="windows" description="Clean, update version number and build Windows installers" depends="clean,update-version-number,windows-msi-bundled-dist,windows-standalone"/>
    <target name="debian" description="Clean, update version number and build Debian/Ubuntu installer (run with fakeroot ant)" depends="clean,update-version-number,dist,debian-dist,debian-bundled-dist"/>

    <target name="urls-rc" description="Check and print RC links">
        <ant dir="${bluej_home}/package" antfile="greenfoot-build.xml"  target="urls-rc"/>
    </target>

    <target name="urls-final" description="Check final release URLs">
        <ant dir="${bluej_home}/package" antfile="greenfoot-build.xml"  target="urls-final"/>
    </target>

    <target name="clean" description="clean up" >
        <echo message="Cleaning..."/>
        <!-- Jar installer image: greenfoot-splash.png -->
        <delete file="${bluej_home}/package/greenfoot-splash.png"/>
        <!-- Splash image: greenfoot-splash.jpg -->
        <delete file="${bluej_home}/boot/src/bluej/greenfoot-splash.png"/>
        <!-- Greenfoot icon for classes: greenfoot-16.png -->
        <delete file="imagelib/other/greenfoot.png"/>
        <!-- Greenfoot icon for application: greenfoot-16.png -->
        <delete file="images/greenfoot.png"/>
        <delete file="${jlayer.jar.path}"/>
        
        <!-- Distributables -->
        <delete >
            <fileset dir=".">
                <include name="package/Greenfoot-*.zip"/>
                <include name="package/greenfoot-*.jar"/>
                <include name="package/Greenfoot-*.jar"/>
            </fileset>
        </delete>
        <!-- API doc -->
        <delete dir="${apidoc}"/>
    
        <delete dir="${bluej.lib.greenfoot}"/>
        <delete dir="${bluej_home}/package/scenarios"/>
        <delete dir="${build}"/>

        <delete includeEmptyDirs="true">
            <fileset dir="${bluej_home}/" >
                <include name="lib/*/greenfoot/" />
            </fileset>
        </delete>
        
        <delete dir="${package}/scenarios"/>
    </target>


    <!--include name="lib/*/greenfootAPI/**" /-->


    <target name="run-greenfoot"  depends="ready-to-run">
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${build_java_home}/${java_command_dir_name}/java">
            <classpath>
                <pathelement location="${bluej_home}/boot/classes" />
                <!-- <path refid="bluej.class.path"/> -->
                <path refid="bluej.src.path"/>
                <pathelement location="${bluej_home}/lib" />
                <pathelement location="/System/Library/Java"/>
                <!-- <pathelement location="${build}"/> -->
            </classpath>

            <arg value="-bluej.debug=true">
            </arg>
            <arg value="-greenfoot=true">
            </arg>
            <arg value="-useclassesdir=true">
            </arg>
            <arg value="-greenfootclassesdir=${build}"/>
            <arg value="-greenfoot.scenarios=${greenfoot.scenarios}"/>
            <arg value="-bluej.compiler.showunchecked=false"/>
        </java>
    </target>
    
    <target name="run-greenfoot-with-local-gallery"  depends="ready-to-run">
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${build_java_home}/${java_command_dir_name}/java">
            <classpath>
                <pathelement location="${bluej_home}/boot/classes" />
                <!-- <path refid="bluej.class.path"/> -->
                <path refid="bluej.src.path"/>
                <pathelement location="/System/Library/Java"/>
                <!-- <pathelement location="${build}"/> -->
            </classpath>

            <arg value="-bluej.debug=true">
            </arg>
            <arg value="-greenfoot=true">
            </arg>
            <arg value="-useclassesdir=true">
            </arg>
            <arg value="-greenfootclassesdir=${build}"/>
            <arg value="-greenfoot.scenarios=${greenfoot.scenarios}"/>
            <arg value="-bluej.compiler.showunchecked=false"/>
            <arg value="-greenfoot.gameserver.address=http://localhost:3000"/>
            <arg value="-greenfoot.gameserver.createAccount.address=http://localhost:3000/users/new"/>
        </java>
    </target>

    <target name="run-scenario-viewer"  depends="ready-to-run,compile-scenarios">
        <!-- run the java code built into the jar files -->
        <java classname="greenfoot.export.GreenfootScenarioViewer" fork="yes" jvm="${build_java_home}/${java_command_dir_name}/java">
            <arg value="${greenfoot.standalone.scenario}"/>
            <arg value="${greenfoot.standalone.main}"/>
            <arg value="${greenfoot.standalone.labels}"/>

            <classpath>
                <pathelement location="${greenfoot.standalone.scenario}"/>
                <pathelement location="${build}"/>
                <path refid="javafx.class.path"/>
                <path refid="bluej.class.path"/>
            </classpath>

        </java>
    </target>

    <target name="compile-standalone" depends="init" description="Compile the source for the standalone version" >
        <delete dir="${standalone.build}"/>
        <mkdir dir="${standalone.build}"/>

        <!-- Compile the java code from ${src} into ${build} -->
        <compile srcdir="${src}" destdir="${standalone.build}">
            <classpath>
                <path refid="javafx.class.path"/>
                <path refid="bluej.class.path"/>
                <pathelement location="${threadchecker.build}"/>
                <pathelement location="${threadchecker.pluginbuild}"/>
            </classpath>

            <include name="greenfoot/core/WorldHandler.java"/>
            <include name="greenfoot/util/GreenfootUtil.java"/>

            <include name="greenfoot/**.java"/>
            <exclude name="greenfoot/ObjectTracker.java"/>

            <include name="greenfoot/actions/PauseSimulationAction.java"/>
            <include name="greenfoot/actions/RunSimulationAction.java"/>
            <include name="greenfoot/actions/RunOnceSimulationAction.java"/>
            <include name="greenfoot/actions/ResetWorldAction.java"/>

            <include name="greenfoot/collision/**/*.java"/>
            
            <include name="greenfoot/core/ProjectProperties.java"/>
            <include name="greenfoot/core/Simulation.java"/>
            <include name="greenfoot/core/SimulationRunnable.java"/>
            <include name="greenfoot/core/ObjectDragProxy.java"/>
            <include name="greenfoot/core/ActInterruptedException.java"/>
            <include name="greenfoot/core/ImageCache.java"/>
            <include name="greenfoot/core/TextLabel.java"/>

            <include name="greenfoot/event/SimulationEvent.java"/>
            <include name="greenfoot/event/SimulationListener.java"/>
            <include name="greenfoot/event/WorldListener.java"/>
            <include name="greenfoot/event/WorldEvent.java"/>
            <include name="greenfoot/event/TriggeredMouseListener.java"/>
            <include name="greenfoot/event/TriggeredMouseMotionListener.java"/>
            <include name="greenfoot/event/TriggeredKeyListener.java"/>
            <include name="greenfoot/event/TriggeredMouseAdapter.java"/>
            <include name="greenfoot/event/TriggeredMouseMotionAdapter.java"/>
            <include name="greenfoot/event/TriggeredKeyAdapter.java"/>
            <include name="greenfoot/event/TriggeredListener.java"/>
            <include name="greenfoot/event/SimulationUIListener.java"/>

            <include name="greenfoot/export/GreenfootScenarioViewer.java"/>
            <include name="greenfoot/export/GreenfootScenarioApplication.java"/>

            <include name="greenfoot/gui/ControlPanel.java"/>
            <include name="greenfoot/gui/DragListener.java"/>
            <include name="greenfoot/gui/DropTarget.java"/>
            <include name="greenfoot/gui/WorldCanvas.java"/>
         
            <include name="greenfoot/gui/input/KeyboardManager.java"/>
            
            <include name="greenfoot/gui/input/InputManager.java"/>

            <include name="greenfoot/gui/input/states/*.java"/>
            
            <include name="greenfoot/gui/input/mouse/*.java"/>

            <include name="greenfoot/platforms/*.java"/>
            <include name="greenfoot/platforms/standalone/*.java"/>
            
            <include name="greenfoot/sound/**/*.java"/>
            
            <include name="greenfoot/util/**/*.java"/>

            <exclude name="greenfoot/util/ExternalAppLauncher.java"/>
        </compile>

        <!-- Greenfoot icon for classes: greenfoot-16.png -->
        <copy file="resources/images/greenfoot-icon-16.png" tofile="${standalone.build}/greenfoot.png"/>


        <!-- Readme label icon -->
        <!-- <copy file="resources/images/readme.png" todir="${standalone.build}"/> -->
        <!-- Image used when dragging object over an area where it can not be dropped  -->
        <copy file="resources/images/noParking.png" todir="${standalone.build}"/>
        <!-- Image selection dialog icon -->
        <!-- <copy file="resources/images/openRight.png" todir="${standalone.build}"/> -->
        <!-- Control panel icons-->
        <copy file="resources/images/run.png" todir="${standalone.build}"/>
        <copy file="resources/images/step.png" todir="${standalone.build}"/>
        <copy file="resources/images/pause.png" todir="${standalone.build}"/>
        <copy file="resources/images/reset.png" todir="${standalone.build}"/>
        <!-- Copy CSS styling, for control panel -->
        <copy file="lib/stylesheets/greenfoot.css" todir="${standalone.build}"/>

        <!-- Copy bluej.Config classes to allow use of i18n labels  -->
        <copy todir="${standalone.build}">
            <fileset dir="${bluej_home}/classes/">
                <include name="bluej/Config.class"/>
                <include name="bluej/utility/CenterLayout.class"/>
                <include name="bluej/utility/javafx/*.class"/>
                <include name="bluej/Config$*.class"/>
                <include name="bluej/BlueJPropStringSource.class"/>
                <include name="bluej/BlueJTheme.class"/>
                <include name="bluej/PropParser.class"/>
                <include name="bluej/PropParser$*.class"/>
            </fileset>
            <fileset dir="${bluej_home}/threadchecker/classes">
                <include name="*.class"/>
            </fileset>
        </copy>
    </target>


    <target name="build-standalone-jar"  depends="compile-standalone" description="Create a jar with all the Greenfoot classes and resources needed for an exported scenario." >
        <jar jarfile="${package}/Greenfoot-core-${greenfoot.apiversion.public}.jar" basedir="${standalone.build}">
            <manifest>
                <attribute name="Main-Class" value="greenfoot.export.GreenfootScenarioViewer" />
            </manifest>
        </jar>
    </target>
    
    <target name="zip-source"  description="create a zip of all the sources and other resources needed to build Greenfoot." >
        <!-- And build sources for BlueJ -->
        <property name="bluej.version.nodots" value="Greenfoot-${greenfoot.version.nodots}"/>
        <property name="bluej.rcsuffix" value="${greenfoot.rcsuffix}"/>
        <ant dir="${bluej_home}/package" target="zip-source"/>
        <zip destfile="${greenfoot.source.zip}" compress="yes">
            <zipfileset dir="." defaultexcludes="yes" prefix="greenfoot">
                <include name="src/**/*.java" />       
                <include name="doc/HOWTO.*" />    
                <include name="doc/THIRDPARTYLICENSE.txt" />
                <include name="doc/LICENSE.txt" />  
                <include name="doc/GREENFOOT_LICENSES.txt" />
                <include name="doc/Greenfoot-README.txt" />
                <include name="doc/Greenfoot-architecture-and-design.txt" />
                <patternset refid="distribution.scenarios"/>
                <exclude name="scenarios/**/**/*.class" />
                <exclude name="scenarios/**/**/greenfoot/" />
                
                <include name="common/**/*.java" />
                <include name="common/**/*.jar" />
                <include name="common/*.png" />
                <include name="common/*.gif" />
                <include name="imagelib/**/*" />           
                <exclude name="images/**/*" />     
                <include name="labels/**/*"/>
                <include name="lib/**/*"/>
                <include name="resources/**/*" />    
                <include name="test/**/*.java" />
                    
                <include name="build.properties" />   
                <include name="build.xml" />  
                <exclude name="**/.DS_Store"/>
            </zipfileset>
            <zipfileset src="${bluej_home}/package/BlueJ-source-${bluej.version.nodots}${bluej.rcsuffix}.zip" prefix="bluej" />                       
        </zip>
    </target>
    
    <target name="add-license-to-sources" description="adds the license to each source file" >     
        <replaceregexp flags="s" encoding="ISO8859-1">
            <regexp pattern="(^\/\*\n This file is part of the Greenfoot program.*? file that accompanied this code\.\n.\*\/\n)|^"/> 
            <substitution expression="${license}"/> 
            <fileset dir="." includes="**/*.java" >
                <exclude name="src/greenfoot/util/GraphicsUtilities.java"/>
                <exclude name="src/greenfoot/util/ShadowRenderer.java"/>
                <exclude name="src/org/syntax/jedit/**"/>
                <exclude name="scenarios/**/**"/>
            </fileset>
        </replaceregexp>
    </target>   

    <target name="clean-scenarios" description="clean up scenarios (remove doc and greenfoot dir)" >
        <delete includeemptydirs="true">
            <fileset dir="scenarios">
                <include name="**/**/*.class"/>
                <include name="**/**/doc/" />
                <include name="**/**/greenfoot/" />
                <include name="**/**/*.ctxt" />
                <include name="**/**/images/greenfoot.png" />
            </fileset>
        </delete>
        <!-- Remove size and location from project.greenfoot -->
        <replaceregexp byline="true">
            <regexp pattern="mainWindow.*"/>
            <substitution expression=""/>
            <fileset dir="scenarios" includes="**/**/project.greenfoot"/>
        </replaceregexp>
        <!-- Remove size and location from project.greenfoot-->
        <replaceregexp byline="true">
            <regexp pattern="package.editor.*"/>
            <substitution expression=""/>
            <fileset dir="scenarios" includes="**/**/project.greenfoot"/>
        </replaceregexp>
        <replaceregexp byline="true" >
            <regexp pattern="target.*editor.*"/>
            <substitution expression=""/>
            <fileset dir="scenarios" includes="**/**/project.greenfoot"/>
        </replaceregexp>

        <!-- Remove empty lines from project.greenfoot -->
        <replaceregexp byline="false" flags="g">
            <regexp pattern="(\r?\n)(\r?\n)+"/>
            <substitution expression="\1"/>
            <fileset dir="scenarios" includes="**/**/project.greenfoot"/>
        </replaceregexp>
    </target>

    <!-- From https://ant.apache.org/faq.html#propertyvalue-as-name-for-property, avoids extra libraries -->
    <macrodef name="propertycopy">
        <attribute name="name"/>
        <attribute name="from"/>
        <sequential>
            <property name="@{name}" value="${@{from}}"/>
        </sequential>
    </macrodef>

    <target name="update-version-number" description="updates the version number in all files where it appears" >
        <!-- This should be done manually instead, only for files actually changed: -->
        <!--
        <replaceregexp byline="true">
            <regexp pattern="@version .*"/>
            <substitution expression="@version ${greenfoot.apiversion.public}"/>
            <fileset dir="${src}/greenfoot" includes="Greenfoot.java,GreenfootImage.java,GreenfootSound.java,Actor.java,World.java,MouseInfo.java,UserInfo.java"/>
        </replaceregexp>
        -->
        
        <replaceregexp byline="true">
            <regexp pattern="GREENFOOT_VERSION = .*"/>
            <substitution expression="GREENFOOT_VERSION = &quot;${greenfoot.version}&quot;;"/>
            <fileset dir="${bluej_home}/boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="GREENFOOT_API_VERSION = .*"/>
            <substitution expression="GREENFOOT_API_VERSION = &quot;${greenfoot.apiversion}&quot;;"/>
            <fileset dir="${bluej_home}/boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="version: .*"/>
            <substitution expression="version: ${greenfoot.version}"/>
            <fileset dir="doc" includes="Greenfoot-README.txt"/>
        </replaceregexp>

        <!-- Update Greenfoot version number in launcher EXE info: -->
        <replaceregexp byline="true" match="(FILE|PRODUCT)VERSION .*" replace="\1VERSION ${greenfoot.version.commas},0">
            <fileset dir="${bluej_home}/package/winlaunch" includes="greenfoot-version.rc" />
        </replaceregexp>
        <replaceregexp byline="true" match="(\s*VALUE &quot;\w+Version&quot;,).*" replace="\1 &quot;${greenfoot.version.nosuffix}&quot;">
            <fileset dir="${bluej_home}/package/winlaunch" includes="greenfoot-version.rc" />
        </replaceregexp>

        <!-- And in the launcher manifest: -->
        <replaceregexp byline="true" match="(\s*&lt;assemblyIdentity\s+version=)&quot;.*&quot;" replace="\1&quot;${greenfoot.version.nosuffix}.0&quot;">
            <fileset dir="${bluej_home}/package/winlaunch" includes="gfmanifest.xml" />
        </replaceregexp>

        <!-- Get the new Installer Id.  Every time you make a new version, you need to add a
             new GUID to the version-guids file, with a line of the form:
                bluej-3.1.7=GUID
                greenfoot-3.0.10a=GUID
             You can get new GUIDs from the website http://guidgen.com/
             If you don't do this, you'll get a build failure.
             -->
        <loadproperties srcFile="${bluej_home}/package/winsetup/version-guids"/>
        <propertycopy name="msi.product.id" from="greenfoot-${greenfoot.version}"/>

        <!-- Update the WiX build files: -->
        <replaceregexp byline="true" match="&lt;Product Version='.*' Id='.*'" replace="&lt;Product Version='${greenfoot.version.nosuffix}' Id='${msi.product.id}'">
            <fileset dir="${bluej_home}/package/winsetup" includes="greenfoot.wxs" />
        </replaceregexp>
        <replaceregexp byline="true" match="(\s*&lt;Property\s+Id=&quot;SOFTWAREVERSION&quot;\s+Value=).*" replace="\1&quot;${greenfoot.version.nosuffix}&quot;/&gt;">
            <fileset dir="${bluej_home}/package/winsetup" includes="greenfoot.wxs" />
        </replaceregexp>
        
        <mkdir dir="${bluej_home}/util/classes"/>
        <compile srcdir="${bluej_home}/util/src" destdir="${bluej_home}/util/classes"/>
        <java classname="DrawVersionOnSplash" classpath="${bluej_home}/util/classes" fork="yes" jvm="${run_java_home}/${java_command_dir_name}/java">
            <arg value="resources/images/greenfoot-splash.png"/> <!-- original -->
            <arg value="Version ${greenfoot.version}"/> <!-- text -->
            <arg value="${bluej_home}/lib/fonts/SourceSansPro-Bold.ttf"/> <!-- font -->
            <arg value="16"/> <!-- font size -->
            <arg value="165"/> <!-- X position -->
            <arg value="145"/> <!-- Y position -->
            <arg value="${bluej_home}/boot/resources/bluej/gen-greenfoot-splash.png"/> <!-- destination -->
        </java>
        <java classname="DrawVersionOnSplash" classpath="${bluej_home}/util/classes" fork="yes" jvm="${run_java_home}/${java_command_dir_name}/java">
            <arg value="resources/images/greenfoot-splash@2x.png"/> <!-- original -->
            <arg value="Version ${greenfoot.version}"/> <!-- text -->
            <arg value="${bluej_home}/lib/fonts/SourceSansPro-Bold.ttf"/> <!-- font -->
            <arg value="32"/> <!-- font size -->
            <arg value="330"/> <!-- X position -->
            <arg value="290"/> <!-- Y position -->
            <arg value="${bluej_home}/boot/resources/bluej/gen-greenfoot-splash@2x.png"/> <!-- destination -->
        </java>
    </target>
</project>
