<?xml version="1.0" encoding="UTF-8"?>
<project name="bluej" default="ready-to-run">

    <!-- ************************************************************ -->
    <!-- set global properties for this build (and subproject builds} -->
    <!-- ************************************************************ -->
    <!-- it should not be necessary to edit any properties to build -->

    <!-- user specific properties that are edited to match local build environment-->
    <property file="build.properties"/>
    <dirname property="bluej_home" file="${ant.file}"/>

    <!-- 
     This is the only place you need to change the version number.
     After changing the version number the target "update-version-number" should be run -->
    <property name="bluej.version.major" value="5" />
    <property name="bluej.version.minor" value="0" />
    <property name="bluej.version.release" value="3" />
    <property name="bluej.version.suffix" value="" />
    <!-- suffix with no spaces, eg "pre2" -->
    <property name="bluej.version.nonspace.suffix" value="" />
    <!-- Suffix added after version number in output files -->
    <property name="bluej.rcsuffix" value="-rc5"/>
    
    <property name="bluej.version" value="${bluej.version.major}.${bluej.version.minor}.${bluej.version.release}${bluej.version.suffix}" />
    <property name="bluej.version.nosuffix" value="${bluej.version.major}.${bluej.version.minor}.${bluej.version.release}" />
    <property name="bluej.version.commas" value="${bluej.version.major},${bluej.version.minor},${bluej.version.release}" />
    <property name="bluej.version.nodots" value="${bluej.version.major}${bluej.version.minor}${bluej.version.release}${bluej.version.suffix}" />
    <property name="bluej.version.debian" value="${bluej.version.major}.${bluej.version.minor}.${bluej.version.release}${bluej.version.nonspace.suffix}" />

    <!-- Set up common directories -->
    <property name="core.doc" value="doc/all"/>
    <property name="extension.doc" value="doc/extensions"/>

    <property name="core.src" value="src"/>
    <property name="core.build" value="classes"/>
    <property name="boot.src" value="boot/src"/>
    <property name="boot.resources" value="boot/resources"/>
    <property name="boot.build" value="boot/classes"/>
    <property name="threadchecker.src" value="threadchecker/src"/>
    <property name="threadchecker.build" value="threadchecker/classes"/>
    <property name="threadchecker.pluginsrc" value="threadchecker/pluginsrc"/>
    <property name="threadchecker.pluginbuild" value="threadchecker/pluginclasses"/>
    <property name="test.src" value="test/src"/>
    <property name="test.build" value="test/classes"/>
    <property name="test.report" value="test/report"/>

    <property name="extensions.lib"  location="${bluej_home}/lib/extensions2"/>

    <property name="boot.jar" value="${bluej_home}/lib/bluej.jar"/>
    <property name="core.jar" value="${bluej_home}/lib/bluejcore.jar"/>
    <property name="editor.jar" value="${bluej_home}/lib/bluejeditor.jar"/>
    <property name="extension2.jar" value="${bluej_home}/lib/bluejext2.jar"/>
    <property name="lang-stride.jar" value="${bluej_home}/lib/lang-stride.jar"/>
    <property name="bluej-junit-ext.jar" value="${bluej_home}/lib/userlib/bluej-junit-ext.jar"/>

    <path id="javafx.class.path">
        <pathelement location="${openjfx_path}/lib/javafx.base.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.controls.jar"/>
        <!-- Needed because of NSMenuFX -->
        <pathelement location="${openjfx_path}/lib/javafx.fxml.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.graphics.jar"/>
        <!-- Needed for sound support, which is BlueJ because of Stride support for sound preview -->
        <pathelement location="${openjfx_path}/lib/javafx.media.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.properties.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.swing.jar"/>
        <pathelement location="${openjfx_path}/lib/javafx.web.jar"/>
        <!-- Ubuntu version, needed for building on Ubuntu if using apt-installed JavaFX: -->
        <pathelement location="${openjfx_path}/javafx-base.jar"/>
        <pathelement location="${openjfx_path}/javafx-controls.jar"/>
        <!-- Needed because of NSMenuFX -->
        <pathelement location="${openjfx_path}/javafx-fxml.jar"/>
        <pathelement location="${openjfx_path}/javafx-graphics.jar"/>
        <!-- Needed for sound support, which is BlueJ because of Stride support for sound preview -->
        <pathelement location="${openjfx_path}/javafx-media.jar"/>
        <pathelement location="${openjfx_path}/javafx-properties.jar"/>
        <pathelement location="${openjfx_path}/javafx-swing.jar"/>
        <pathelement location="${openjfx_path}/javafx-web.jar"/>
    </path>

    <path id="javafx.monocle.class.path">
        <pathelement location="${openjfx_monocle_path}/lib/javafx.base.jar"/>
        <pathelement location="${openjfx_monocle_path}/lib/javafx.controls.jar"/>
        <!-- Needed because of NSMenuFX -->
        <pathelement location="${openjfx_monocle_path}/lib/javafx.fxml.jar"/>
        <pathelement location="${openjfx_monocle_path}/lib/javafx.graphics.jar"/>
        <!-- Needed for sound support, which is BlueJ because of Stride support for sound preview -->
        <pathelement location="${openjfx_monocle_path}/lib/javafx.media.jar"/>
        <pathelement location="${openjfx_monocle_path}/lib/javafx.properties.jar"/>
        <pathelement location="${openjfx_monocle_path}/lib/javafx.swing.jar"/>
        <pathelement location="${openjfx_monocle_path}/lib/javafx.web.jar"/>
    </path>
    
    <!-- Set up classpath (does not include jar files built by us) -->
    <path id="bluej.class.path">
        <fileset dir="${bluej_home}/lib/" includes="junit-*.jar" />
        <pathelement location="${bluej_home}/lib/hamcrest-core-1.3.jar"/>
        <pathelement location="${bluej_home}/lib/httpclient-4.1.1.jar"/>
        <pathelement location="${bluej_home}/lib/httpcore-4.1.jar"/>
        <pathelement location="${bluej_home}/lib/httpmime-4.1.1.jar"/>
        <pathelement location="${bluej_home}/lib/commons-logging-api-1.1.2.jar"/>
        <pathelement location="${bluej_home}/lib/diffutils-1.2.1.jar"/>
        <pathelement location="${bluej_home}/lib/xom-1.3.7.jar"/>
        <pathelement location="${bluej_home}/lib/guava-17.0.jar"/>
        <pathelement location="${bluej_home}/lib/jsch-0.1.53.jar"/>
        <pathelement location="${bluej_home}/lib/org.eclipse.jgit-4.9.0.jar"/>
        <pathelement location="${bluej_home}/lib/nsmenufx-2.1.8.jar"/>
        <pathelement location="${bluej_home}/lib/wellbehavedfx-0.3.3.jar"/>
        <pathelement location="${bluej_home}/lib/classgraph-4.8.90.jar"/>
    </path>
    
    <path id="test.class.path">
        <pathelement location="${bluej_home}/lib/hamcrest-library-1.3.jar"/>
        <pathelement location="${bluej_home}/lib/slf4j-api-1.7.2.jar"/>
        <pathelement location="${bluej_home}/lib/slf4j-jdk14-1.7.2.jar"/>
        <pathelement location="${bluej_home}/lib/testlib/antlr-runtime-3.4.jar"/>
        <pathelement location="${bluej_home}/lib/testlib/generics-resolver-2.0.1.jar"/>
        <pathelement location="${bluej_home}/lib/testlib/javaruntype-1.3.jar"/>
        <pathelement location="${bluej_home}/lib/testlib/junit-quickcheck-core-0.8.2.jar"/>
        <pathelement location="${bluej_home}/lib/testlib/ognl-3.1.12.jar"/>
        <pathelement location="${bluej_home}/lib/testlib/testfx-core-4.0.15-alpha.jar"/>
        <pathelement location="${bluej_home}/lib/testlib/testfx-junit-4.0.15-alpha.jar"/>
    </path>

    <import file="shared.xml"/>

    <!--
      -  Compile the boot strap loader
     -->
    <target name="compile-boot" depends="compile-threadchecker">
        <mkdir dir="${boot.build}"/>
        <!-- Compile the java code from ${boot.src} into ${boot.build} -->
        <!-- Boot should not need any other jars or classes other than standard JDK -->
        <compile srcdir="${boot.src}"
                 destdir="${boot.build}">
            <classpath>
                <pathelement location="${threadchecker.build}"/>
                <pathelement location="${threadchecker.pluginbuild}"/>
                <path refid="javafx.class.path"/>
                <pathelement location="${bluej_home}/lib/nsmenufx-2.1.8.jar"/>
            </classpath>
            <compilerarg value="-Xmaxerrs"/><compilerarg value="100"/>
            <compilerarg value="-Xplugin:threadchecker.TCPlugin"/>
            <!-- we use some private packages/classes currently: -->
            <compilerarg line="--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED"/>
        </compile>
        <copy todir="${boot.build}">
            <fileset dir="${boot.resources}" />
        </copy>
    </target>

    <target name="compile-threadchecker">
        <mkdir dir="${threadchecker.build}"/>
        <mkdir dir="${threadchecker.pluginbuild}"/>
        <compile
            srcdir="${threadchecker.src}"
            destdir="${threadchecker.build}"/>
            <compile
            srcdir="${threadchecker.pluginsrc}"
            destdir="${threadchecker.pluginbuild}"

            >
            <classpath>
                <pathelement location="${threadchecker.build}"/>
            </classpath>
        </compile>
        <copy todir="${threadchecker.build}/META-INF">
            <fileset dir="${threadchecker.src}/META-INF"/>
        </copy>
    </target>


    <!--
      -  Compile the core classes (includes extension and editor classes)
     -->
    <target name="compile-core" depends="compile-boot,compile-threadchecker">
        <mkdir dir="${core.build}"/>
        <!-- Compile the java code from ${core.src} into ${core.build} -->
        <echo message="Excluding: ${srcexcludes}" />
        <compile srcdir="${core.src}"
                 destdir="${core.build}"
                 excludes="bluej/editor/moe/Moe.java,
                           bluej/editor/moe/**,
                           ${srcexcludes}">
            <classpath>
                <path refid="javafx.class.path"/>
                <path refid="bluej.class.path"/>
                <pathelement location="${threadchecker.build}"/>
                <pathelement location="${threadchecker.pluginbuild}"/>
                <pathelement location="${boot.build}"/>
            </classpath>
            <compilerarg value="-Xmaxerrs"/><compilerarg value="1000"/>
            <compilerarg value="-Xplugin:threadchecker.TCPlugin"/>

            <!-- <compilerarg value="-J-XX:+UnlockCommercialFeatures"/>
            <compilerarg value="-J-XX:+FlightRecorder"/>
            <compilerarg value="-J-XX:StartFlightRecording=filename=nccb-without.jfr,duration=120s,settings=/Users/neil/workspace/BlueJ/nccb.jfc"/> -->
        </compile>
    </target>

    <target name="compile-test" depends="compile-boot, compile-core">
        <mkdir dir="${test.build}"/>
        <mkdir dir="${test.report}"/>
        <!-- Compile the java code from ${test.src} into ${test.build} -->
        <compile srcdir="${test.src}"
                 destdir="${test.build}">
            <classpath>
                <path refid="javafx.class.path"/>
                <path refid="bluej.class.path"/>
                <path refid="test.class.path"/>
                <pathelement location="${threadchecker.build}"/>
                <pathelement location="${threadchecker.pluginbuild}"/>
                <pathelement location="${boot.build}"/>
                <pathelement location="${core.build}"/>
            </classpath>
        </compile>
    </target>

    <target name="jar-boot" depends="compile-boot">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${boot.jar}"/>
        <!-- this is the Boot, the resulting jar is bluej.jar for historic reasons -->
        <jar compress="yes" jarfile="${boot.jar}">
            <fileset dir="${boot.build}">
                <include name="bluej/Boot*.class"/>
                <include name="bluej/Splash*.class"/>
            </fileset>
            <fileset dir="${boot.resources}">
                <include name="bluej/gen-bluej-splash*.png"/>
                <include name="bluej/gen-greenfoot-splash*.png"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="bluej.Boot"/>
            </manifest>
        </jar>
    </target>

    <target name="jar-core" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${core.jar}"/>
        <jar compress="yes" jarfile="${core.jar}">
            <fileset dir="${core.build}">
                <exclude name="bluej/extensions2/**" />
                <exclude name="bluej/editor/**" />
                <exclude name="org/**" />
                <exclude name="lang/**" />
            </fileset>
            <fileset dir="lib">
                <include name="stylesheets/**"/>
            </fileset>
        </jar>
    </target>

    <target name="jar-junit-extension" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${bluej-junit-ext.jar}"/>
        <jar compress="yes" jarfile="${bluej-junit-ext.jar}">
            <fileset dir="${core.build}/bluej/runtime">
                <exclude name="**" />
                <include name="UnitTestExtension.java" />
            </fileset>
            <metainf dir="${core.src}/bluej/runtime">
                <include name="services/**"/>
            </metainf>
        </jar>
    </target>

    <target name="jar-stride">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${lang-stride.jar}"/>
        <jar compress="yes" jarfile="${lang-stride.jar}">
            <fileset dir="${core.build}">
                <include name="lang/stride/**" />
            </fileset>
        </jar>
    </target>

    <target name="jar-editor" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${editor.jar}"/>
        <jar compress="yes" jarfile="${editor.jar}">
            <fileset dir="${core.build}">
                <include name="bluej/editor/**" />
                <include name="org/**" />
                <exclude name="bluej/editor/*.txt" />
                <exclude name="bluej/editor/*.xml" />
            </fileset>
        </jar>
    </target>

    <target name="jar-extension" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${extension2.jar}"/>
        <jar compress="yes" jarfile="${extension2.jar}">
            <fileset dir="${core.build}">
                <include name="bluej/extensions2/**" />
            </fileset>
        </jar>
    </target>

    <target name="ready-to-run" depends="jar-core, jar-editor, jar-extension, jar-stride, jar-junit-extension">
    </target>

    <target name="ready-to-run-greenfoot" description="prepare to run Greenfoot">
        <!-- We can exclude version control from the build -->
        <property name="srcexcludes" value="bluej/groupwork/git/**" />
        <antcall target="ready-to-run" />
    </target>

    <target name="rebuild-ready" depends="clean,ready-to-run">
        <!-- Useful for running threadchecker -->
    </target>

    <target name="run">
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${run_java_home}/${java_command_dir_name}/java">
            <!-- Include the following line to enable attachment of the Netbeans debugger
            <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8888,server=y,suspend=n"/>
            -->
            <classpath>
                <pathelement location="${boot.jar}"/>
                <pathelement location="/System/Library/Java"/>
            </classpath>
        </java>
    </target>

    <target name="dist" depends="ready-to-run,check-licences">
        <ant dir="package" target="dist"/>
    </target>

    <target name="dist-greenfoot" depends="ready-to-run-greenfoot,check-licences">
        <ant dir="package" antfile="greenfoot-build.xml" target="dist"/>
    </target>

    <target name="windows-msi-bundled-dist" depends="dist" description="Build the Windows MSI installer">
        <ant dir="package" target="windows-msi-bundled-dist"/>
    </target>

    <target name="windows-standalone" depends="dist" description="Build the Windows standalone ZIP (for USB sticks)">
        <ant dir="package" target="windows-standalone"/>
    </target>

    <target name="mac-dist" description="Build Mac installer" depends="dist">
        <ant dir="package" target="mac-dist"/>
    </target>

    <!-- The simple targets for doing a complete build: -->
    <target name="mac" description="Clean, update version number and build Mac installer" depends="clean,update-version-number,mac-dist"/>
    <target name="windows" description="Clean, update version number and build Windows installers" depends="clean,update-version-number,windows-msi-bundled-dist,windows-standalone"/>
    <target name="debian" description="Clean, update version number and build Debian/Ubuntu installer (run with fakeroot ant)" depends="clean,update-version-number,debian-dist,debian-bundled-dist"/>

    <target name="urls-rc" description="Check and print RC links">
        <ant dir="package" target="urls-rc"/>
    </target>

    <target name="urls-final" description="Check final release URLs">
        <ant dir="package" target="urls-final"/>
    </target>

    <!-- build *.deb package -->
    <target name="debian-dist" description="Build the .deb Debian/Ubuntu package" depends="check-fakeroot,dist">
        <ant dir="package" target="debian-dist"/>
    </target>
    <target name="debian-bundled-dist" description="Build the .deb Debian/Ubuntu package" depends="check-fakeroot,dist">
        <ant dir="package" target="debian-bundled-dist"/>
    </target>

    <target name="test" depends="compile-boot, compile-core, compile-test">
        <junit printsummary="yes"
               haltonfailure="yes"
               jvm="${build_java_home}/${java_command_dir_name}/java"
               fork="yes"
        >
            <classpath>
                <path refid="javafx.monocle.class.path"/>
                <path refid="bluej.class.path"/>
                <path refid="test.class.path"/>
                
                <pathelement location="${boot.build}"/>
                <pathelement location="${core.build}"/>
                <pathelement location="${extension2.jar}"/>
                <pathelement location="${editor.jar}"/>
                <pathelement location="${lang-stride.jar}"/>
                <pathelement location="${test.build}"/>
                <!-- Needed to access the test data files: -->
                <pathelement location="${test.src}"/>
            </classpath>

            <formatter type="brief" usefile="false"/>
            
            <jvmarg value="-Djava.awt.headless=true"/>
            <jvmarg value="-Dtestfx.robot=glass"/>
            <jvmarg value="-Dtestfx.headless=true"/>
            <jvmarg value="-Dprism.order=sw"/>
            <jvmarg value="-Dprism.text=t2k"/>
            <jvmarg value="-Dtestfx.setup.timeout=5000"/>
            <jvmarg value="-Dglass.platform=Monocle"/>
            <jvmarg value="-Dmonocle.platform=Headless"/>
            <jvmarg value="-Dheadless.geometry=1280x1024-32"/>

            <batchtest fork="yes" skipnontests="true">
                <fileset dir="${test.src}">
                    <include name="**/*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="doc-extension" depends="jar-boot, compile-boot">
        <mkdir dir="${extension.doc}"/>
        <javadoc destdir="${extension.doc}"
            packagenames="bluej.extensions.event"
            sourcepath="${core.src}"

            Windowtitle="BlueJ Extensions API"
            Doctitle="BlueJ Extensions API"
            bottom="&lt;a href=http://www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;"
            Encoding="utf8">

            <fileset dir="src" defaultexcludes="yes">
                <include name="bluej/extensions2/*.java" />
                <exclude name="bluej/extensions2/ExtensionBridge.java"/>
                <include name="bluej/extensions2/editor/*.java"/>
                <exclude name="bluej/extensions2/editor/EditorBridge.java"/>
                <include name="bluej/extensions2/event/*.java"/>
            </fileset>
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${threadchecker.build}"/>
                <pathelement location="${threadchecker.pluginbuild}"/>
                <path refid="javafx.class.path"/>
                <pathelement location="${boot.jar}"/>
            </classpath>
        </javadoc>
    </target>

    <!-- From https://ant.apache.org/faq.html#propertyvalue-as-name-for-property, avoids extra libraries -->
    <macrodef name="propertycopy">
        <attribute name="name"/>
        <attribute name="from"/>
        <sequential>
            <property name="@{name}" value="${@{from}}"/>
        </sequential>
    </macrodef>

    <target name="update-version-number" description="updates the version number in all files where it appears" >
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_MAJOR = .*"/>
            <substitution expression="BLUEJ_VERSION_MAJOR = ${bluej.version.major};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_MINOR = .*"/>
            <substitution expression="BLUEJ_VERSION_MINOR = ${bluej.version.minor};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_RELEASE = .*"/>
            <substitution expression="BLUEJ_VERSION_RELEASE = ${bluej.version.release};"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="BLUEJ_VERSION_SUFFIX = .*"/>
            <substitution expression="BLUEJ_VERSION_SUFFIX = &quot;${bluej.version.suffix}&quot;;"/>
            <fileset dir="boot/src/bluej" includes="Boot.java"/>
        </replaceregexp>

        <!-- update BlueJ README.txt version number -->
        <replaceregexp byline="true">
            <regexp pattern="BlueJ version .*\b (\s+--.*)" />
            <substitution expression="BlueJ version ${bluej.version} \1"/>
            <fileset dir="doc" includes="README.TXT" />
        </replaceregexp>

        <!-- Update BlueJ version number in launcher EXE info: -->
        <replaceregexp byline="true" match="(FILE|PRODUCT)VERSION .*" replace="\1VERSION ${bluej.version.commas},0">
            <fileset dir="package/winlaunch" includes="bluej-version.rc" />
        </replaceregexp>
        <replaceregexp byline="true" match="(\s*VALUE &quot;\w+Version&quot;,).*" replace="\1 &quot;${bluej.version.nosuffix}&quot;">
            <fileset dir="package/winlaunch" includes="bluej-version.rc" />
        </replaceregexp>

        <!-- And in the launcher manifest: -->
        <replaceregexp byline="true" match="(\s*&lt;assemblyIdentity\s+version=)&quot;.*&quot;" replace="\1&quot;${bluej.version.nosuffix}.0&quot;">
            <fileset dir="package/winlaunch" includes="bjmanifest.xml" />
        </replaceregexp>

        <!-- Get the new Installer Id.  Every time you make a new version, you need to add a
             new GUID to the version-guids file, with a line of the form:
                bluej-3.1.7=GUID
                greenfoot-3.0.10a=GUID
             You can get new GUIDs from the website http://guidgen.com/
             If you don't do this, you'll get a build failure.
             -->
        <loadproperties srcFile="package/winsetup/version-guids"/>
        <propertycopy name="msi.product.id" from="bluej-${bluej.version}"/>

        <!-- Update the WiX build files: -->
        <replaceregexp byline="true" match="&lt;Product Version='.*' Id='.*'" replace="&lt;Product Version='${bluej.version.nosuffix}' Id='${msi.product.id}'">
            <fileset dir="package/winsetup" includes="bluej.wxs" />
        </replaceregexp>
        <replaceregexp byline="true" match="(\s*&lt;Property\s+Id=&quot;SOFTWAREVERSION&quot;\s+Value=).*" replace="\1&quot;${bluej.version.nosuffix}&quot;/&gt;">
            <fileset dir="package/winsetup" includes="bluej.wxs" />
        </replaceregexp>

        <mkdir dir="util/classes"/>
        <compile srcdir="util/src" destdir="util/classes"/>
        <mkdir dir="boot/resources/bluej"/>
        <java classname="DrawVersionOnSplash" classpath="util/classes" fork="yes" jvm="${run_java_home}/${java_command_dir_name}/java">
            <arg value="resources/unversioned-bluej-splash.png"/> <!-- original -->
            <arg value="${bluej.version}"/> <!-- text -->
            <arg value="${bluej_home}/lib/fonts/SourceSansPro-Bold.ttf"/> <!-- font -->
            <arg value="16"/> <!-- font size -->
            <arg value="215"/> <!-- X position -->
            <arg value="114"/> <!-- Y position -->
            <arg value="boot/resources/bluej/gen-bluej-splash.png"/> <!-- destination -->
        </java>
        <java classname="DrawVersionOnSplash" classpath="util/classes" fork="yes" jvm="${run_java_home}/${java_command_dir_name}/java">
            <arg value="resources/unversioned-bluej-splash@2x.png"/> <!-- original -->
            <arg value="${bluej.version}"/> <!-- text -->
            <arg value="${bluej_home}/lib/fonts/SourceSansPro-Bold.ttf"/> <!-- font -->
            <arg value="32"/> <!-- font size -->
            <arg value="430"/> <!-- X position -->
            <arg value="228"/> <!-- Y position -->
            <arg value="boot/resources/bluej/gen-bluej-splash@2x.png"/> <!-- destination -->
        </java>
    </target>
    
    <target name="clean-boot">
        <delete quiet="true" dir="${boot.build}"/>
        <delete quiet="true" file="${boot.jar}"/>
    </target>

    <target name="clean-greenfoot" description="clean up greenfoot related stuff" >
        <!-- Used by jar installer: greenfoot-splash.png -->
        <delete file="package/greenfoot-splash.png" />
        <delete dir="lib/greenfoot" />
        <delete file="lib/greenfoot.jar" />
        <delete dir="package/scenarios" />
        
        <delete includeEmptyDirs="true">
            <fileset dir="lib">
                <include name="*/greenfoot/" />
            </fileset>
        </delete>
    </target>

    <target name="clean-core">
        <delete quiet="true" dir="${core.build}" />
        <delete quiet="true" file="${core.jar}" />
        <delete quiet="true" file="${editor.jar}" />
        <delete quiet="true" file="${extension2.jar}" />
        <delete quiet="true" file="${lang-stride.jar}" />
    </target>

    <target name="clean" depends="clean-boot, clean-core, clean-greenfoot">
        <echo message="Cleaning..."/>
        <ant dir="package" target="clean"/>
        <delete quiet="true" dir="${threadchecker.build}" />
        <delete quiet="true" dir="${threadchecker.pluginbuild}" />
    	<delete quiet="true" dir="${test.build}" />
    </target>
   
    <target name="check-licences" description="Check that no un-vetted additional libraries have been added to the source tree">
        <!-- The purpose of this target is to help ensure that libraries do not get added to the source
             tree without properly checking and complying with their license(s). -->
        <pathconvert property="missing.licenses" pathsep="${line.separator}">
            <fileset dir="lib">
                <!-- Look for JARs in lib, except the ones we generate: -->
                <!-- (Ideally we'd separate BlueJ and Greenfoot JARs, but never mind: -->
                <include name="*.jar"/>
                <exclude name="bluej*.jar"/>
                <exclude name="lang-stride.jar"/>
                <exclude name="greenfoot.jar"/>

                <!-- Now we exclude all files for which the license is correctly noted in the
                     THIRDPARTYLICENSE.txt file and for which a copy of the license is in the
                     doc/thirdpartylicenses directory, and for which it has been verified that
                     the licensing requirements are otherwise met. -->

                <!-- DO NOT add to this list without first ensuring that the above requirements
                     are met! -->

                <exclude name="commons-logging-api-1.1.2.jar"/>
                <exclude name="classgraph-4.8.90.jar"/>
                <exclude name="diffutils-1.2.1.jar"/>
                <exclude name="guava-17.0.jar"/>
                <exclude name="hamcrest-core-1.3.jar"/>
                <exclude name="hamcrest-library-1.3.jar"/>
                <exclude name="httpclient-4.1.1.jar"/>
                <exclude name="httpcore-4.1.jar"/>
                <exclude name="httpmime-4.1.1.jar"/>
                <exclude name="junit-*.jar"/>
                <exclude name="nsmenufx-2.1.8.jar"/>
                <exclude name="opentest4j-1.2.0.jar"/>
                <exclude name="wellbehavedfx-0.3.3.jar"/>
                <exclude name="xom-1.3.7.jar"/>
                <exclude name="jsch-0.1.53.jar"/>
                <exclude name="org.eclipse.jgit-4.9.0.jar"/>
                <exclude name="slf4j-api-1.7.2.jar"/>
                <exclude name="slf4j-jdk14-1.7.2.jar"/>

                <!-- Greenfoot libraries: -->
                <exclude name="jl1.0.1.jar"/>
                <exclude name="opencsv-2.3.jar"/>

            </fileset>
            <fileset dir="lib/testlib">
                <exclude name="antlr-runtime-3.4.jar"/>
                <exclude name="generics-resolver-2.0.1.jar"/>
                <exclude name="javaruntype-1.3.jar"/>
                <exclude name="junit-quickcheck-core-0.8.2.jar"/>
                <exclude name="ognl-3.1.12.jar"/>
                <exclude name="openjfx-monocle-jdk-11+26.jar"/> <!-- Same licence as OpenJFX -->
                <exclude name="testfx-core-4.0.15-alpha.jar"/>
                <exclude name="testfx-junit-4.0.15-alpha.jar"/>
            </fileset>
        </pathconvert>
        
        <!-- Then check no licenses are missing: -->
        <fail message="Missing third party licenses: ${missing.licenses}">
            <condition>
                <not>
                    <equals arg1="${missing.licenses}" arg2=""/>
                </not>
            </condition>
        </fail>
    </target>
</project>
