<?xml version="1.0" encoding="UTF-8"?>
<project name="bluej-package" default="dist">
    
    <!-- Names of the the distributables created by the dist-target -->
    <property name="dist.jarinstaller" value="BlueJ-generic-${bluej.version.nodots}${bluej.rcsuffix}.jar"/>
    <property name="dist.jarinstaller.final" value="BlueJ-generic-${bluej.version.nodots}.jar"/>
    <property name="dist.mac.legacy" value="BlueJ-mac-legacy-${bluej.version.nodots}${bluej.rcsuffix}.zip"/>
    <property name="dist.mac" value="BlueJ-mac-${bluej.version.nodots}${bluej.rcsuffix}.zip"/>
    <property name="dist.mac.final" value="BlueJ-mac-${bluej.version.nodots}.zip"/>

    <property name="dist.linux" value="BlueJ-linux-${bluej.version.nodots}${bluej.rcsuffix}"/>
    <property name="dist.linux.final" value="BlueJ-linux-${bluej.version.nodots}"/>
    <property name="dist.win" value="BlueJ-windows-${bluej.version.nodots}${bluej.rcsuffix}"/>
    <property name="dist.win.final" value="BlueJ-windows-${bluej.version.nodots}"/>
    <property name="dist.jar" value="bluej-dist.jar"/>        
    
    <property name="bluej.source.zip" value="BlueJ-source-${bluej.version.nodots}${bluej.rcsuffix}.zip"/>
    
    <!-- Library files to be installed as part of BlueJ -->
    <patternset id="bluej.libfiles">
        <exclude name="**/.#*" />
        <include name="lib/bluej.jar" />
        <include name="lib/bluejcore.jar" />
        <include name="lib/bluejeditor.jar" />
        <include name="lib/bluejext2.jar" />
        <include name="lib/lang-stride.jar" />
        <include name="lib/junit-*.jar" />
        <include name="lib/hamcrest-core-1.3.jar" />
        <include name="lib/hamcrest-library-1.3.jar" />
        <include name="lib/sshconnection.jar" />
        <include name="lib/org-netbeans-lib-cvsclient.jar" />
        <include name="lib/jsch.jar" />
        <include name="lib/httpclient-4.1.1.jar" />
        <include name="lib/httpcore-4.1.jar" />
        <include name="lib/httpmime-4.1.1.jar" />
        <include name="lib/commons-logging-api-1.1.2.jar" />
        <include name="lib/diffutils-1.2.1.jar" />
        <include name="lib/classgraph-4.8.90.jar" />
        <include name="lib/guava-17.0.jar" />
        <include name="lib/xom-1.3.7.jar" />
        <include name="lib/bluej.defs" />
        <include name="lib/moe.defs" />
        <include name="lib/userlib/README.TXT" />
        <include name="lib/jsch-0.1.53.jar"/>
        <include name="lib/org.eclipse.jgit-4.9.0.jar"/>
        <include name="lib/slf4j-api-1.7.2.jar"/>
        <include name="lib/slf4j-jdk14-1.7.2.jar"/>
        <include name="lib/nsmenufx-2.1.8.jar"/>
        <include name="lib/wellbehavedfx-0.3.3.jar"/>
        <include name="lib/windowtofront.js" />
    </patternset>

    <patternset id="bluej.libdirs">
        <exclude name="**/.#*" />
        <include name="lib/images/*.gif" />
        <include name="lib/images/*.png" />
        <include name="lib/images/*.jpg" />
        <include name="lib/images/*.icns" />
        <include name="lib/fonts/*.ttf" />
        <include name="lib/afrikaans/" />
        <include name="lib/arabic/" />
        <include name="lib/catalan/" />
        <include name="lib/chinese/" />
        <include name="lib/czech/" />
        <include name="lib/danish/" />
        <include name="lib/dutch/" />
        <include name="lib/english/" />
        <include name="lib/french/" />
        <include name="lib/german/" />
        <include name="lib/greek/" />
        <include name="lib/italian/" />
        <include name="lib/japanese/" />
        <include name="lib/korean/" />
        <include name="lib/polish/" />
        <include name="lib/portuguese/" />
        <include name="lib/russian/" />
        <include name="lib/slovak/" />
        <include name="lib/spanish/" />
        <include name="lib/swedish/" />
        <include name="lib/extensions2/" />
        <include name="lib/stylesheets/" />
        <include name="lib/tutorial/" />
        <exclude name="lib/*/greenfoot-labels" />
        <exclude name="lib/*/greenfootAPI" />
    </patternset>

    <patternset id="bluej.examples">
        <exclude name="**/*.pkh" />
        <exclude name="**/.#*" />
        <include name="examples/debugdemo/" />
        <include name="examples/hello/" />
        <include name="examples/people/" />
        <include name="examples/people2/" />
        <include name="examples/picture/" />
        <include name="examples/file-reader/" />
        <include name="examples/shapes/" />
        <include name="examples/LED-Button/" />
    </patternset>
    
    <patternset id="bluej.icons">
        <include name="icons/*" />
    </patternset>

    <patternset id="bluej.examples.classes">
        <include name="examples/people/*.class" />
    </patternset>

    <fileset id="bluej.license.files" dir="${bluej_home}/doc/">
        <include name="LICENSE.txt" />
        <include name="THIRDPARTYLICENSE.txt" />
    </fileset>

    <!-- These are files which should be made to have system line endings -->
    <patternset id="bluej.textfiles.utf8">
        <include name="examples/**/*.java" />
        <include name="examples/**/README.*" />
        <include name="lib/bluej.defs" />
        <include name="lib/moe.defs" />
        <include name="lib/*/templates/**" />
        <include name="doc/*.txt" />
        <include name="doc/*.TXT" />
        <include name="doc/HOWTO.*" />
    </patternset>
    <patternset id="bluej.textfiles.iso88591">
        <include name="lib/*/labels" />
        <include name="lib/*/dialogues" />
        <include name="lib/*/*.help" />
    </patternset>
    
    <!-- Builds the bluej-dist.jar file -->
    <target name="pre-dist">
        <delete dir="install_tmp" />
        <mkdir dir="install_tmp"/>

        <!-- construct the directory structure we want for the distribution -->
        <copy todir="install_tmp">
            <fileset dir="${bluej_home}" >
                <patternset refid="bluej.libfiles"/>
                <patternset refid="bluej.libdirs"/>
                <patternset refid="bluej.examples"/>
                <patternset refid="bluej.icons" />
            </fileset>
            <fileset refid="bluej.license.files"/>
            <fileset dir="${bluej_home}/doc">
                <include name="README.TXT"/>            
            </fileset>
        </copy>

        <!-- make sure the people .class files are dated in the future so they
             will appear to be compiled -->
         <tstamp>
            <format property="touch.time" pattern="yyyy-MM-dd" offset="5" unit="year"/>
        </tstamp>

        <touch datetime="${touch.time}" pattern="yyyy-MM-dd">
            <fileset dir="install_tmp" >
                <patternset refid="bluej.examples.classes"/>
            </fileset>
        </touch>

        <!-- make sure line endings are in unix format -->
        <fixcrlf srcdir="install_tmp" eol="lf" encoding="ISO-8859-1">
            <patternset refid="bluej.textfiles.iso88591" />
        </fixcrlf>
        <fixcrlf srcdir="install_tmp" eol="lf" encoding="UTF-8">
            <patternset refid="bluej.textfiles.utf8" />
        </fixcrlf>
        
        <chmod dir="install_tmp" perm="a+r"/>
        <!-- jar the entire distribution into one jar file            -->
        <!-- (use zip instead of jar to avoid generation of manifest) -->
        <zip zipfile="${dist.jar}"
             basedir="install_tmp"
             compress="yes"
        />
        
        <delete dir="install_tmp" />
    </target>
    
    <target name="dist">
        <antcall target="pre-dist" />
        
        <mkdir dir="install_tmp"/>

        <!-- Build the program which calculates the length of the  -->
        <!-- distribution jar, and stores its length in the        -->
        <!-- installer properties                                  -->
        <javac
               executable="${build_java_home}/${java_command_dir_name}/javac"
               fork="yes"
               srcdir="."
               destdir="install_tmp"
               includes="InstallerProps.java"
               includeantruntime="false"
               debug="true"
        />

        <!-- Now run it -->
        <java
               classname="InstallerProps"
               fork="yes"
               jvm="${build_java_home}/${java_command_dir_name}/java"
            >
            <classpath>
                 <pathelement location="install_tmp" />
            </classpath>
            <arg line="installer.props"/>
        </java>

        <!-- And delete it as it's no longer needed   -->
        <delete file="install_tmp/InstallerProps.class"/>
        
        <!-- Copy other files needed by the installer -->
        <copy todir="install_tmp" file="${dist.jar}"/>
        <copy todir="install_tmp" file="installer-logo.gif"/>

        <!-- compile the installer -->
        <javac
               executable="${build_java_home}/${java_command_dir_name}/javac"
               fork="yes"
               srcdir="."
               destdir="install_tmp"
               includeantruntime="false"
               includes="Installer.java"
               debug="true"
        >
            <compilerarg line="-source 6"/>
            <compilerarg line="-target 6"/>
        </javac>

        <!-- bundle the resulting class into the final distribution jar file -->
        <jar jarfile="${dist.jarinstaller}"
             basedir="install_tmp"
             compress="no"
             manifest="manifest"
        />

        <!-- create the source zip -->
        <antcall target="zip-source"/>
        <!-- cleanup
             leaves bluej-dist.jar for distribution to whoever is
             building the windows installer. Mac and generic installers
             are now created. -->
        <delete dir="install_tmp"/>
       
        <echo message="----------------------------------------------------------------------------"/>
        <echo level="info" message="The bluej-dist.jar (for building the windows installer) is in: ${basedir}${file.separator}${dist.jar}"/>
        <echo message="The generic installer is in: ${basedir}${file.separator}${dist.jarinstaller}"/>
        <echo message="The source is in: ${basedir}${file.separator}${bluej.source.zip}"/>
    </target>


    <target name="mac-dist" depends="pre-dist">
        <delete dir="mac_tmp" />
        
        <!-- Create the directory which will be the top level directory when unzipped-->
        <property name="zip_dir" location="mac_tmp/BlueJ ${bluej.version}/" />
        <mkdir dir="${zip_dir}" />
        
        <!-- Files in this list will get the executable attribute set -->
        <property name="executable_files" value="**/PkgInfo,**/JavaApplicationStub" />

        <!-- copy the skeleton mac dir -->
        <copy todir="${zip_dir}/BlueJ.app">
            <fileset dir="macfiles/BlueJ-legacy.app"/> 
        </copy>
        
        <!-- update version number -->
        <replaceregexp byline="true">
            <regexp pattern="VERSION" />
            <substitution expression="${bluej.version}" />
            <fileset dir="${zip_dir}/BlueJ.app/Contents" includes="Info.plist" />
        </replaceregexp>
        
        <copy todir="${zip_dir}">
            <fileset dir="${bluej_home}">
                <patternset refid="bluej.libfiles" />
                <patternset refid="bluej.libdirs" />
                <patternset refid="bluej.examples" />
            </fileset>
        </copy>
        
        <!-- The lib dir should not be in the root dir, so we move the contents to the proper mac-location -->
        <move todir="${zip_dir}/BlueJ.app/Contents/Resources/Java">
            <fileset dir="${zip_dir}/lib/" />
        </move>
        <delete dir="${zip_dir}/BlueJ.app/Contents/Resources/Java/lib" />

        <copy todir="${zip_dir}/BlueJ.app/Contents/Resources/Java/javafx">
            <fileset dir="${openjfx_path}" />
        </copy>

        <!-- ZIP it -->
        <zip destfile="${dist.mac.legacy}" duplicate="fail">
            <zipfileset dir="mac_tmp" excludes="${executable_files}" />
            <!-- Make the files executable that need to be executable -->
            <zipfileset dir="mac_tmp" filemode="755" includes="${executable_files}" />
        </zip>

        <!-- Bundled JDK build -->
        <!-- rename BlueJ.app to BlueJ-legacy.app -->
        <move file="${zip_dir}/BlueJ.app" tofile="${zip_dir}/BlueJ-legacy.app" />
        
        <!-- copy the skeleton mac dir -->
        <copy todir="${zip_dir}/BlueJ.app">
            <fileset dir="macfiles/BlueJ.app"/> 
        </copy>

        <!-- build the native launcher -->
        <exec dir="macfiles/nativelauncher/" executable="/bin/bash">
            <arg value="compile.sh"/>
            <env key="JAVA_HOME" value="${build_java_home}"/>
        </exec>
        
        <!-- copy the native launcher into place -->
        <copy todir="${zip_dir}/BlueJ.app/Contents/MacOS" file="macfiles/nativelauncher/JavaAppLauncher" />
        
        <!-- update version number -->
        <replaceregexp byline="true">
            <regexp pattern="VERSION" />
            <substitution expression="${bluej.version}" />
            <fileset dir="${zip_dir}/BlueJ.app/Contents" includes="Info.plist" />
        </replaceregexp>
        
        <!-- Move contents from legacy app to new app -->
        <move file="${zip_dir}/BlueJ-legacy.app/Contents/Resources/Java"
            todir="${zip_dir}/BlueJ.app/Contents/Resources" />

        <!-- Remove the legacy app -->
        <delete dir="${zip_dir}/BlueJ-legacy.app" />
        
        <property name="executable_files2" value="**/PkgInfo,**/JavaAppLauncher" />
        <chmod perm="+x">
            <fileset dir="${zip_dir}/BlueJ.app/Contents" includes="${executable_files2}" />
        </chmod>
        <chmod perm="a+r">
            <fileset dir="${zip_dir}/BlueJ.app/Contents" includes="Info.plist" />
        </chmod>

        <!-- codesign needs Internet connection to verify current time -->
        <echo message="Signing and verifying bundle (NOTE: Internet connection is required to sign)"/>
        <chmod perm="+x" file="bundle-mac.sh" />
        <exec executable="bundle-mac.sh" resolveexecutable="true" outputproperty="bundleoutput">
            <arg value="${zip_dir}" />
            <arg value="BlueJ.app" />
            <arg value="${mac_bundled_jdk_path}" />
            <arg value="${basedir}/${dist.mac}" />
        </exec>
        <echo message="${bundleoutput}"/>
        <chmod perm="+x" file="sign-mac.sh" />
        <!-- Only works if you have Michael's key, otherwise get him to run this command -->
        <exec executable="sign-mac.sh" resolveexecutable="true" outputproperty="signoutput">
            <arg value="${basedir}/${dist.mac}" />
            <arg value="Michael"/>
        </exec>
        <echo message="${signoutput}"/>
        
        <delete dir="mac_tmp" />

        <echo message="----------------------------------------------------------------------------"/>
        <echo message="The mac installer is in: ${basedir}${file.separator}${dist.mac}"/>

    </target>

    <!-- To make sure Windows paths don't have problems with escapes, replace
             backslash with forward slash.
             So C:\Java\jdk1.8.0_60 becomes c:/Java/jdk1.8.0_60 -->
    <loadresource property="mingw_jdk">
        <propertyresource name="build_java_home"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="\" to="/"/>
            </tokenfilter>
        </filterchain>
    </loadresource>

    <target name="windows-launcher">
        <!-- build launcher -->
        <exec dir="winlaunch" executable="${mingw_root}/bin/mingw32-make.exe" failonerror="true">
            <arg line="clean bjlaunch.exe BUILD=bluej JDKDIR='${mingw_jdk}'"/>
            <env key="PATH" path="${mingw_root}/bin:${env.PATH}"/>
        </exec>
    </target>

    <target name="windows-launcher-usb">
        <!-- build launcher -->
        <exec dir="winusblaunch" executable="${mingw_root}/bin/mingw32-make.exe" failonerror="true">
            <arg line="clean bluej.exe BUILD=bluej JDKDIR='${mingw_jdk}'"/>
            <env key="PATH" path="${mingw_root}/bin:${env.PATH}"/>
        </exec>
    </target>

    <target name="windows-standalone" depends="dist,windows-launcher,windows-launcher-usb">
        <mkdir dir="winsetup/standalone"/>
        <delete dir="winsetup/standalone/bluej" failonerror="false"/>
        <delete dir="winsetup/standalone/greenfoot" failonerror="false"/>
        <delete dir="winsetup/standalone" includes="*.exe" />
        <unzip src="${dist.jar}" dest="winsetup/standalone/bluej" />
        <!-- make sure line endings are in windows format -->
        <fixcrlf srcdir="winsetup/standalone/bluej" eol="crlf" encoding="ISO-8859-1">
            <patternset refid="bluej.textfiles.iso88591" />
        </fixcrlf>
        <fixcrlf srcdir="winsetup/standalone/bluej" eol="crlf" encoding="UTF-8">
            <patternset refid="bluej.textfiles.utf8" />
        </fixcrlf>

        <!-- Copy top-level special launcher -->
        <copy todir="winsetup/standalone" file="winusblaunch/bluej.exe"/>

        <!-- Copy usual launcher -->
        <copy tofile="winsetup/standalone/bluej/BlueJ.exe" file="winlaunch/bjlaunch.exe"/>

        <!-- Copy the JDK to be bundled -->
        <copy todir="winsetup/standalone/bluej/jdk">
            <fileset dir="${win_bundled_jdk_path}" />
        </copy>

        <copy todir="winsetup/standalone/bluej/lib/javafx">
            <fileset dir="${openjfx_path}" />
        </copy>

        <!-- Fix the path to the JDK in bluej.defs -->
        <replaceregexp byline="true">
            <regexp pattern="#bluej\.windows\.vm=.*"/>
            <substitution expression="bluej.windows.vm=jdk"/>
            <fileset dir="winsetup/standalone/bluej/lib" includes="bluej.defs"/>
        </replaceregexp>

        <!-- Adjust the home directory -->
        <replaceregexp byline="true">
            <regexp pattern="#bluej\.userHome=.*"/>
            <substitution expression="bluej.userHome=userhome"/>
            <fileset dir="winsetup/standalone/bluej/lib" includes="bluej.defs"/>
        </replaceregexp>


        <zip destfile="${dist.win}.zip">
            <zipfileset dir="winsetup/standalone"/>
        </zip>

        <delete dir="winsetup/standalone" />
    </target>
    
    <target name="windows-msi-dist" depends="dist,windows-launcher">
        <delete dir="winsetup/SourceDir" />
        <delete dir="winsetup" includes="*.wixobj" />
        <unzip src="${dist.jar}" dest="winsetup/SourceDir" />

        <!-- make sure line endings are in windows format -->
        <fixcrlf srcdir="winsetup/SourceDir" eol="crlf" encoding="ISO-8859-1">
            <patternset refid="bluej.textfiles.iso88591" />
        </fixcrlf>
        <fixcrlf srcdir="winsetup/SourceDir" eol="crlf" encoding="UTF-8">
            <patternset refid="bluej.textfiles.utf8" />
        </fixcrlf>
        
        <exec dir="winsetup" executable="${wix_bin}/candle.exe">
            <arg line="-arch x64"/>
            <arg line="CheckboxExtrasDlg.wxs"/>
        </exec>
            
        <exec dir="winsetup" executable="${wix_bin}/candle.exe">
            <arg line="-arch x64"/>
            <arg line="ui.wxs"/>
        </exec>
            
        <exec dir="winsetup" executable="${wix_bin}/candle.exe">
            <arg line="-arch x64"/>
            <arg line="bluej.wxs"/>
        </exec>
            
        <!-- The heat tool scans all the files in SourceDir and generates
             a WiX file that has all the XML needed for installing all those files -->
        <exec dir="winsetup" executable="${wix_bin}/heat.exe">
            <arg line="dir SourceDir -cg BlueJFiles -dr INSTALLDIR -ke -gg -srd -sfrag -template fragment -out bluej-install-files.wxs"/>
        </exec>
        <exec dir="winsetup" executable="${wix_bin}/candle.exe">
            <arg line="-arch x64"/>
            <arg line="bluej-install-files.wxs"/>
        </exec>
            
        <exec dir="winsetup" executable="${wix_bin}/light.exe">
            <arg line="-ext WixUIExtension -loc bluej.wxl bluej.wixobj CheckboxExtrasDlg.wixobj ui.wixobj bluej-install-files.wixobj -o bluej-${bluej.version}.msi"/>
        </exec>
        <delete dir="winsetup/SourceDir" />
    </target>

    <target name="windows-msi-bundled-dist" depends="dist,windows-launcher">
        <delete dir="winsetup/SourceDir" />
        <delete dir="winsetup" includes="*.wixobj" />
        <unzip src="${dist.jar}" dest="winsetup/SourceDir" />

        <!-- make sure line endings are in windows format -->
        <fixcrlf srcdir="winsetup/SourceDir" eol="crlf" encoding="ISO-8859-1">
            <patternset refid="bluej.textfiles.iso88591" />
        </fixcrlf>
        <fixcrlf srcdir="winsetup/SourceDir" eol="crlf" encoding="UTF-8">
            <patternset refid="bluej.textfiles.utf8" />
        </fixcrlf>
        
        <!-- Fix the path to the JDK in bluej.defs -->
        <replaceregexp byline="true">
            <regexp pattern="#bluej\.windows\.vm=.*"/>
            <substitution expression="bluej.windows.vm=jdk"/>
            <fileset dir="winsetup/SourceDir/lib" includes="bluej.defs"/>
        </replaceregexp>

        <!-- Copy the JDK to be bundled -->
        <copy todir="winsetup/SourceDir/jdk">
            <fileset dir="${win_bundled_jdk_path}" />
        </copy>

        <copy todir="winsetup/SourceDir/lib/javafx">
            <fileset dir="${openjfx_path}" />
        </copy>
        
        <!-- The heat tool scans all the files in SourceDir and generates
             a WiX file that has all the XML needed for installing all those files -->
        <exec dir="winsetup" executable="${wix_bin}/heat.exe">
            <arg line="dir SourceDir -cg BlueJFiles -dr INSTALLDIR -ke -gg -srd -sfrag -sreg -scom template fragment -out bluej-install-files.wxs"/>
        </exec>

        <exec dir="winsetup" executable="${wix_bin}/candle.exe">
            <arg line="-arch x64"/>
            <arg line="CheckboxExtrasDlg.wxs"/>
        </exec>
            
        <exec dir="winsetup" executable="${wix_bin}/candle.exe">
            <arg line="-arch x64"/>
            <arg line="ui.wxs"/>
        </exec>
            
        <exec dir="winsetup" executable="${wix_bin}/candle.exe">
            <arg line="-arch x64"/>
            <arg line="bluej.wxs"/>
        </exec>
            
        <exec dir="winsetup" executable="${wix_bin}/candle.exe">
            <arg line="-arch x64"/>
            <arg line="bluej-install-files.wxs"/>
        </exec>
            
        <exec dir="winsetup" executable="${wix_bin}/light.exe">
            <arg line="-ext WixUIExtension -loc bluej.wxl bluej.wixobj CheckboxExtrasDlg.wixobj ui.wixobj bluej-install-files.wixobj -o bluej-${bluej.version}-bundled.msi"/>
        </exec>
        <copy file="winsetup/bluej-${bluej.version}-bundled.msi" tofile="${dist.win}.msi"/>
        <delete dir="winsetup/SourceDir" />
    </target>
        
    <target name="debian-dist">
        <mkdir dir="bluejdeb" />
        <copy todir="bluejdeb">
            <fileset dir="debianfiles" includes="DEBIAN/**" />
        </copy>
        
        <mkdir dir="bluejdeb/usr" />
        <mkdir dir="bluejdeb/usr/bin" />
        <copy todir="bluejdeb/usr/bin" file="debianfiles/bluej" />
        <chmod perm="ugo+x" file="bluejdeb/usr/bin/bluej" verbose="true" />
        
        <!-- lib files -->
        <mkdir dir="bluejdeb/usr/share/bluej" />
        <mkdir dir="bluejdeb-lib-tmp" />
        <copy todir="bluejdeb-lib-tmp">
            <fileset dir="${bluej_home}">
                <patternset refid="bluej.libdirs" />
                <patternset refid="bluej.libfiles" />
            </fileset>
        </copy>
        <move todir="bluejdeb/usr/share/bluej">
            <fileset dir="bluejdeb-lib-tmp/lib">
                <patternset includes="**" />
            </fileset>
        </move>
        <delete dir="bluejdeb-lib-tmp" />
        
        <!-- examples and documentation -->
        <mkdir dir="bluej-examples-tmp" />
        <copy todir="bluej-examples-tmp">
            <fileset dir="${bluej_home}">
                <patternset refid="bluej.examples" />
            </fileset>
        </copy>
        <mkdir dir="bluejdeb/usr/share/doc/BlueJ" />
        <move todir="bluejdeb/usr/share/doc/BlueJ">
            <fileset dir="bluej-examples-tmp/examples">
                <patternset includes="**" />
            </fileset>
        </move>
        <delete dir="bluej-examples-tmp" />
        <copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/LICENSE.txt" />
        <copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/THIRDPARTYLICENSE.txt" />
        <copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/README.TXT" />

        <!-- desktop app extras -->
        <copy todir="bluejdeb/usr/share">
            <fileset dir="debianfiles">
                <patternset includes="applications/**,icons/**,pixmaps/**" />
            </fileset>
        </copy>

        <!-- update version number -->
        <replaceregexp byline="true">
            <regexp pattern="VERSION" />
            <substitution expression="${bluej.version.debian}" />
            <fileset dir="bluejdeb/DEBIAN" includes="control" />
        </replaceregexp>
        
        <!-- you must do this as root, sigh -->
                <!-- (but we can also do it using fakeroot -->
        <chown owner="root">
            <fileset dir="bluejdeb">
                <patternset includes="**" />
            </fileset>
            <dirset dir="bluejdeb">
                <patternset includes="**" />
            </dirset>            
        </chown>
        <chgrp group="root">
            <fileset dir="bluejdeb">
                <patternset includes="**" />
            </fileset>
            <dirset dir="bluejdeb">
                <patternset includes="**" />
            </dirset>            
        </chgrp>
                <chmod perm="g-w">
            <fileset dir="bluejdeb">
                <patternset includes="**" />
            </fileset>
            <dirset dir="bluejdeb">
                <patternset includes="**" />
            </dirset>            
                </chmod>
        
        <chmod perm="755" file="bluejdeb/DEBIAN/postinst" />
        <chmod perm="755" file="bluejdeb/DEBIAN/postrm" />
        <exec executable="dpkg-deb" searchpath="true">
            <arg value="-b" />
            <arg file="bluejdeb" />
            <arg value="${dist.linux}-unbundled.deb" />
        </exec>
        
        <delete dir="bluejdeb" />
    </target>

    <target name="debian-bundled-dist">
        <mkdir dir="bluejdeb" />
        <copy todir="bluejdeb">
            <fileset dir="debianfiles-bundled" includes="DEBIAN/**" />
        </copy>
        <copy todir="bluejdeb" overwrite="true">
            <fileset dir="debianfiles-bundled" includes="DEBIAN/**" />
        </copy>
        
        <mkdir dir="bluejdeb/usr" />
        <mkdir dir="bluejdeb/usr/bin" />
        <copy todir="bluejdeb/usr/bin" file="debianfiles-bundled/bluej" />
        <chmod perm="ugo+x" file="bluejdeb/usr/bin/bluej" verbose="true" />
        
        <!-- lib files -->
        <mkdir dir="bluejdeb/usr/share/bluej" />
        <mkdir dir="bluejdeb-lib-tmp" />
        <copy todir="bluejdeb-lib-tmp">
            <fileset dir="${bluej_home}">
                <patternset refid="bluej.libdirs" />
                <patternset refid="bluej.libfiles" />
            </fileset>
        </copy>
        <mkdir dir="bluejdeb-lib-tmp/lib/javafx"/>
        <copy todir="bluejdeb-lib-tmp/lib/javafx">
            <fileset dir="${openjfx_path}"/>
        </copy>
        <move todir="bluejdeb/usr/share/bluej">
            <fileset dir="bluejdeb-lib-tmp/lib">
                <patternset includes="**" />
            </fileset>
        </move>
        <delete dir="bluejdeb-lib-tmp" />

        <mkdir dir="bluejdeb/usr/share/bluej/jdk" />
        <!-- Need to preserve permissions, which requires cp instead of copy task: -->
        <exec executable="cp">
            <arg value="-r"/>
            <arg value="${deb_bundled_jdk_path}/."/>
            <arg value="bluejdeb/usr/share/bluej/jdk"/>
        </exec>

        
        <!-- examples and documentation -->
        <mkdir dir="bluej-examples-tmp" />
        <copy todir="bluej-examples-tmp">
            <fileset dir="${bluej_home}">
                <patternset refid="bluej.examples" />
            </fileset>
        </copy>
        <mkdir dir="bluejdeb/usr/share/doc/BlueJ" />
        <move todir="bluejdeb/usr/share/doc/BlueJ">
            <fileset dir="bluej-examples-tmp/examples">
                <patternset includes="**" />
            </fileset>
        </move>
        <delete dir="bluej-examples-tmp" />
        <copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/LICENSE.txt" />
        <copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/THIRDPARTYLICENSE.txt" />
        <copy todir="bluejdeb/usr/share/doc/BlueJ" file="../doc/README.TXT" />

        <!-- desktop app extras -->
        <copy todir="bluejdeb/usr/share">
            <fileset dir="debianfiles">
                <patternset includes="applications/**,icons/**,pixmaps/**" />
            </fileset>
        </copy>

        <!-- update version number -->
        <replaceregexp byline="true">
            <regexp pattern="VERSION" />
            <substitution expression="${bluej.version.debian}" />
            <fileset dir="bluejdeb/DEBIAN" includes="control" />
        </replaceregexp>
        
        <!-- you must do this as root, sigh -->
                <!-- (but we can also do it using fakeroot -->
        <chown owner="root">
            <fileset dir="bluejdeb">
                <patternset includes="**" />
            </fileset>
            <dirset dir="bluejdeb">
                <patternset includes="**" />
            </dirset>            
        </chown>
        <chgrp group="root">
            <fileset dir="bluejdeb">
                <patternset includes="**" />
            </fileset>
            <dirset dir="bluejdeb">
                <patternset includes="**" />
            </dirset>            
        </chgrp>
                <chmod perm="g-w">
            <fileset dir="bluejdeb">
                <patternset includes="**" />
            </fileset>
            <dirset dir="bluejdeb">
                <patternset includes="**" />
            </dirset>            
                </chmod>
        
        <chmod perm="755" file="bluejdeb/DEBIAN/postinst" />
        <chmod perm="755" file="bluejdeb/DEBIAN/postrm" />
        <exec executable="dpkg-deb" searchpath="true">
            <arg value="-b" />
            <arg file="bluejdeb" />
            <arg value="${dist.linux}.deb" />
        </exec>
        
        <delete dir="bluejdeb" />
    </target>

    <target name="zip-source"  description="create a zip of all the sources and other resources needed to build BlueJ." >
        <zip destfile="${bluej.source.zip}" compress="yes">
            <zipfileset dir="${bluej_home}" defaultexcludes="yes">
                <include name="src/**/*.java" />       
                <include name="boot/src/**/*.java" />       
                <include name="boot/resources/bluej/*.png" />
                <include name="threadchecker/src/**/*" />
                <include name="threadchecker/pluginsrc/**/*" />
                <include name="doc/HOWTO.*" />    
                <include name="doc/THIRDPARTYLICENSE.txt" />
                <include name="doc/LICENSE.txt" />
                <include name="doc/README.TXT" />
                <include name="doc/BlueJ-architecture-and-design.txt" />
                <include name="doc/BlueJ-parser.txt" />
                <include name="doc/threading-issues.txt" />
                <include name="doc/thirdpartylicenses/*" />
                <include name="examples/**/*" />          
                <include name="icons/**/*" />           
                <include name="lib/**/*" />

                <!-- exclude Greenfoot files -->
                <exclude name="lib/jl*"/>
                <exclude name="lib/bluej.jar"/>
                <exclude name="lib/bluejcore.jar"/>
                <exclude name="lib/bluejeditor.jar"/>
                <exclude name="lib/bluejext2.jar"/>
                <exclude name="lib/lang-stride.jar"/>
                <exclude name="lib/greenfoot.jar"/>
                <exclude name="lib/greenfoot/"/>
                
                <include name="package/**/*" />     
                <exclude name="package/commons-*"/>
                <exclude name="package/${bluej.source.zip}"/>
                <exclude name="package/BlueJ*.msi"/>
                <exclude name="package/BlueJ*.jar"/>
                <exclude name="package/BlueJ*.zip"/>
                <exclude name="package/bluej*.deb"/>
                <exclude name="package/bluej-dist.jar"/>
                <exclude name="package/install_tmp/"/>
                <exclude name="package/winsetup/*.msi"/>
                <include name="test/**/*"/>
                <exclude name="test/classes/**"/>
                <include name="util/**/*.java"/>
                <include name="build.properties.template"/>
                <include name="build.xml"/>  
                <include name="shared.xml"/>  
                <exclude name="**/.*"/>
            </zipfileset>
        </zip>
    </target>
    
    <target name="clean">
        <delete>
            <fileset dir="." includes="BlueJ-generic-*.jar"/>
            <fileset dir="." includes="BlueJ-mac-*.zip"/>
            <fileset dir="." includes="BlueJ-source-*.zip"/>
            <fileset dir="." includes="BlueJ-windows-*.zip"/>
            <fileset dir="." includes="BlueJ-windows-*.msi"/>
            <fileset dir="." includes="BlueJ-linux-*.deb"/>
        </delete>
        <delete file="${dist.jar}"/>       
        <delete file="winsetup/$(dist.win}.exe" />
        <delete dir="install_tmp" />
    </target>

    <target name="urls-rc">
        <echo message="Mac:"/>
        <test_url system="bluej" filename="rc/${dist.mac}"/>
        <echo message="Windows MSI:"/>
        <test_url system="bluej" filename="rc/${dist.win}.msi"/>
        <echo message="Windows ZIP:"/>
        <test_url system="bluej" filename="rc/${dist.win}.zip"/>
        <echo message="Linux:"/>
        <test_url system="bluej" filename="rc/${dist.linux}.deb"/>
        <echo message="Generic:"/>
        <test_url system="bluej" filename="rc/${dist.jarinstaller}"/>
    </target>

    <target name="urls-final">
        <echo message="Mac:"/>
        <test_url system="bluej" filename="${dist.mac.final}"/>
        <echo message="Windows MSI:"/>
        <test_url system="bluej" filename="${dist.win.final}.msi"/>
        <echo message="Windows ZIP:"/>
        <test_url system="bluej" filename="${dist.win.final}.zip"/>
        <echo message="Linux:"/>
        <test_url system="bluej" filename="${dist.linux.final}.deb"/>
        <echo message="Generic:"/>
        <test_url system="bluej" filename="${dist.jarinstaller.final}"/>
    </target>


</project>
